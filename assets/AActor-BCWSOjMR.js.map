{"version":3,"file":"AActor-BCWSOjMR.js","sources":["../../content/GraphArchives/UnrealEngine/AActor.md?raw"],"sourcesContent":["export default \"---\\ntitle: 'AActor'\\ndate: '2025-08-17T16:17:41+09:00'\\n---\\n> **언리얼 엔진 월드를 구성하는 가장 기본적인 '오브젝트'이자 '존재'입니다.** 레벨에 배치할 수 있는 모든 것, 즉 캐릭터, 소품, 조명, 카메라 등은 모두 `AActor`로부터 시작됩니다. 월드에 존재하려면 반드시 `AActor`여야 합니다.\\n\\n## 주요 역할 및 책임\\n> **`AActor`는 월드 내에서 위치, 회전, 크기를 가지며, 스스로 존재하고 행동할 수 있는 모든 것의 청사진입니다.**\\n* **월드 내 존재의 단위 (Unit of Existence in World)**:\\n\\t레벨에 배치(Spawn)될 수 있는 가장 기본적인 클래스입니다. 위치([[FTransform]]), 회전, 스케일 값을 가집니다.\\n* **컴포넌트의 컨테이너 (Container for Components)**:\\n\\t`AActor` 자체는 많은 기능을 가지고 있지 않습니다. 대신, 기능 단위인 [[UActorComponent]]들을 담는 그릇 역할을 합니다. 예를 들어, 시각적 외형은 [[UStaticMeshComponent]]가, 이동 능력은 [[UMovementComponent]]가 담당하며, `AActor`는 이들을 조합하여 완성됩니다.\\n* **네트워크 복제 (Network Replication)**:\\n\\t서버에서 클라이언트로 상태를 복제(Replicate)할 수 있는 능력을 갖추고 있습니다. 멀티플레이어 게임의 모든 동기화는 `AActor` 단위로 이루어집니다.\\n* **생명 주기 관리 (Lifecycle Management)**:\\n\\t월드에 스폰될 때(`BeginPlay`), 매 프레임마다(`Tick`), 그리고 월드에서 사라질 때(`EndPlay`)의 생명 주기 [[Event]]를 가지고 있어, 개발자가 원하는 시점에 특정 로직을 실행할 수 있습니다.\\n\\n## 핵심 속성·함수\\n> **`AActor`의 상태를 제어하고 월드와 상호작용하기 위한 가장 기본적인 도구들입니다.**\\n* **`GetTransform()` / `SetActorTransform(const FTransform& NewTransform)`**:\\n\\t`AActor`의 위치, 회전, 스케일 정보를 한 번에 얻거나 설정합니다.\\n* **`GetActorLocation()` / `SetActorLocation(const FVector& NewLocation)`**:\\n\\t`AActor`의 월드 내 위치(좌표)를 얻거나 설정합니다.\\n* **`GetActorRotation()` / `SetActorRotation(const FRotator& NewRotation)`**:\\n\\t`AActor`의 회전 값을 얻거나 설정합니다.\\n* **`Destroy()`**:\\n\\t이 `AActor`를 월드에서 제거하도록 요청합니다. 실제 파괴는 약간의 지연 이후에 일어납니다.\\n* **`OnActorBeginOverlap`**:\\n\\t다른 `AActor`와 처음으로 겹치기 시작했을 때 호출되는 [[Event]]입니다.\\n* **`OnActorEndOverlap`**:\\n\\t다른 `AActor`와의 겹침이 끝났을 때 호출되는 [[Event]]입니다.\\n* **`GetComponents(TArray<UActorComponent*>& Components)`**:\\n\\t이 `AActor`에 붙어있는 모든 컴포넌트의 목록을 가져옵니다.\\n\\n## 주요 서브클래스\\n> **`AActor`는 매우 범용적이므로, 특정 목적에 맞게 기능이 추가된 다양한 자식 클래스들이 존재합니다.**\\n* **[[APawn]]**:\\n\\t[[AController]]에 의해 제어될 수 있는 `AActor`입니다. 플레이어나 AI의 '아바타' 역할을 합니다.\\n* **[[ACharacter]]**:\\n\\t걷고, 뛰고, 점프하는 등 인간형 이동에 특화된 폰입니다.\\n* **[[AStaticMeshActor]]**:\\n\\t레벨에 배치되는 돌, 나무, 건물 등 움직이지 않는 정적인 메쉬를 표현하는 데 사용되는 간단한 `AActor`입니다.\\n* **[[ALight]]**:\\n\\t월드를 밝히는 조명의 역할을 하는 `AActor`입니다.\\n* **[[ACameraActor]]**:\\n\\t특정 시점을 나타내는 카메라 역할을 하는 `AActor`입니다.\\n\\n## 사용 패턴 및 워크플로우\\n> **사용 패턴 및 워크플로우 실무 팁: 프로젝트 요구에 맞는 설정을 우선 검토하세요.**\\n* 레벨에 `AActor`를 배치하고, 필요한 컴포넌트를 추가하여 기능을 부여합니다.\\n* 스폰이 필요한 경우 [[UGameplayStatics]]의 `SpawnActor` 계열 함수를 사용합니다.\\n\\n## 관련 클래스\\n> **`AActor`의 기능을 이루는 구성 요소 단위입니다.**\\n* **[[UActorComponent]]**:\\n\\t`AActor`의 기능을 이루는 구성 요소 단위입니다.\\n* **[[USceneComponent]]**:\\n\\t트랜스폼(위치/회전/스케일)을 가지는 컴포넌트의 베이스입니다.\\n* **[[UPrimitiveComponent]]**:\\n\\t렌더링/물리/충돌 등 시각·물리 표현을 담당합니다.\\n* **[[UGameplayStatics]]**:\\n\\t액터 스폰/검색 등 유틸리티 함수 모음입니다.\\n* **[[AController]] / [[APawn]]**:\\n\\t제어 가능한 액터 계층으로, 게임플레이의 핵심 주체입니다.\\n\\n## 코드 예시\\n> **// 가장 기본적인 AActor 서브클래스와 스폰 예시 #include \\\"GameFramework/Actor.h\\\" #include \\\"Kismet/GameplayStatics.h\\\"**\\n```cpp\\n// 가장 기본적인 AActor 서브클래스와 스폰 예시\\n#include \\\"GameFramework/Actor.h\\\"\\n#include \\\"Kismet/GameplayStatics.h\\\"\\n\\nclass AMyActor : public AActor\\n{\\n    GENERATED_BODY()\\n\\npublic:\\n    virtual void BeginPlay() override\\n    {\\n        Super::BeginPlay();\\n        UE_LOG(LogTemp, Log, TEXT(\\\"AMyActor::BeginPlay\\\"));\\n    }\\n};\\n\\n// 다른 액터에서 스폰\\nvoid ASpawner::SpawnSimpleActor()\\n{\\n    UWorld* World = GetWorld();\\n    if (!World) return;\\n    FActorSpawnParameters Params;\\n    Params.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AdjustIfPossibleButAlwaysSpawn;\\n    World->SpawnActor<AMyActor>(AMyActor::StaticClass(), GetActorLocation() + FVector(100,0,0), FRotator::ZeroRotator, Params);\\n}\\n```\\n\\n\""],"names":["__vite_glob_1_4"],"mappings":"AAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;"}