{"version":3,"file":"AAIController-CQZKjMYT.js","sources":["../../content/GraphArchives/UnrealEngine/AAIController.md?raw"],"sourcesContent":["export default \"---\\ntitle: 'AAIController'\\ndate: '2025-08-17T16:17:41+09:00'\\n---\\n> 인공지능(AI) 캐릭터의 '뇌'가 되어, 스스로 판단하고 행동하며 [[APawn]]을 제어하는 특수한 [[AController]]입니다.\\n\\n## 주요 역할 및 책임\\n> **월드 인식 → 의사결정 → 이동/행동 실행의 전체 루프를 총괄합니다.**\\n월드 인식 → 의사결정 → 이동/행동 실행의 전체 루프를 총괄합니다.\\n* **의사 결정 (Decision Making)**:\\n\\t[[UBehaviorTree]]를 실행해 현재 상황에 맞는 행동(예: 순찰, 추적, 엄폐)을 선택합니다.\\n* **월드 인식 (World Perception)**:\\n\\t[[UAIPerceptionComponent]]로 시각/청각 등 자극을 감지해 목표를 갱신합니다.\\n* **내비게이션 (Navigation)**:\\n\\t[[UNavigationSystemV1]]·NavMesh 기반으로 경로를 계산해 목표 지점까지 이동합니다.\\n* **[[APawn]] 제어 (Pawn Control)**:\\n\\t`Possess`로 [[APawn]]을 빙의하고 `MoveTo*` 계열로 실제 이동을 수행합니다.\\n\\n## 핵심 속성·함수\\n> **행동 제어와 상태 관리를 위한 핵심 API입니다. 실무 팁: 기본값과 런타임 영향부터 확인하세요.**\\n행동 제어와 상태 관리를 위한 핵심 API입니다.\\n* **`RunBehaviorTree(UBehaviorTree* BTAsset)`**:\\n\\t비헤이비어 트리를 실행합니다.\\n* **`MoveToActor(AActor* Goal, ...)` / `MoveToLocation(const FVector& Dest, ...)`**:\\n\\t목표 액터 또는 위치로 이동 명령을 내립니다.\\n* **`GetBlackboardComponent()`**:\\n\\t블랙보드 컴포넌트를 반환합니다.\\n* **`SetFocus(AActor* NewFocus)` / `ClearFocus(EAIFocusPriority::Type)`**:\\n\\t특정 액터에 포커스를 맞추거나 해제합니다.\\n* **`BrainComponent` (`UBrainComponent*`)**:\\n\\tAI의 두뇌 역할을 하는 컴포넌트입니다.\\n\\n## 사용 패턴 및 워크플로우\\n> **`OnPossess`에서 `RunBehaviorTree`를 호출하고, 블랙보드 키를 일관된 네이밍으로 관리합니다. 실무 팁: 프로젝트 요구에 맞는 설정을 우선 검토하세요.**\\n* **Behavior Tree 구동**:\\n\\t`OnPossess`에서 `RunBehaviorTree`를 호출하고, 블랙보드 키를 일관된 네이밍으로 관리합니다.\\n* **Perception 설정**:\\n\\t[[UAIPerceptionComponent]]를 추가하고 시야/청각 설정을 분리해 튜닝합니다. `OnTargetPerceptionUpdated`에서 목표를 블랙보드에 반영합니다.\\n* **이동 명령**:\\n\\t`MoveToActor/Location`은 기존 이동이 있으면 자동 취소될 수 있으니, 조건부 재발행 또는 `FAIMoveRequest`로 세밀하게 제어합니다.\\n* **Focus 운용**:\\n\\t장거리 추적/근접 전투 등 상황에 따라 `SetFocus` 대상을 바꾸고 필요 시 `ClearFocus`로 해제합니다.\\n\\n## 관련 클래스\\n> **트리 기반 의사결정 툴입니다. 실무 팁: 연관 클래스의 생명주기와 의존도를 반드시 확인하세요.**\\n* **[[UBehaviorTree]]**:\\n\\t트리 기반 의사결정 툴입니다.\\n* **[[UBlackboardComponent]]**:\\n\\t공유 데이터 저장소입니다.\\n* **[[UAIPerceptionComponent]]**:\\n\\t감각(시각/청각) 처리를 담당합니다.\\n* **[[UNavigationSystemV1]]**:\\n\\t경로 탐색 시스템입니다.\\n* **[[APawn]]**:\\n\\t제어 대상 본체입니다.\\n\\n## 코드 예시\\n> **// 간단한 AIController: 비헤이비어 트리 실행 + 플레이어를 목표로 이동 #include \\\"AIController.h\\\" #include \\\"BehaviorTree/BehaviorTree.h\\\" #include \\\"BehaviorTree/BlackboardComponent.h\\\" #include \\\"Kismet/GameplayStatics.h\\\"**\\n```cpp\\n// 간단한 AIController: 비헤이비어 트리 실행 + 플레이어를 목표로 이동\\n#include \\\"AIController.h\\\"\\n#include \\\"BehaviorTree/BehaviorTree.h\\\"\\n#include \\\"BehaviorTree/BlackboardComponent.h\\\"\\n#include \\\"Kismet/GameplayStatics.h\\\"\\n\\nclass AMyAIController : public AAIController\\n{\\n    GENERATED_BODY()\\n\\npublic:\\n    UPROPERTY(EditDefaultsOnly, Category=\\\"AI\\\")\\n    UBehaviorTree* BehaviorTreeAsset = nullptr;\\n\\n    virtual void OnPossess(APawn* InPawn) override\\n    {\\n        Super::OnPossess(InPawn);\\n\\n        if (BehaviorTreeAsset)\\n        {\\n            RunBehaviorTree(BehaviorTreeAsset);\\n        }\\n\\n        // 간단한 예: 첫 번째 플레이어 폰을 찾아 이동\\n        APawn* PlayerPawn = UGameplayStatics::GetPlayerPawn(this, 0);\\n        if (PlayerPawn)\\n        {\\n            // 블랙보드 사용 시 키에 저장해도 됨\\n            if (UBlackboardComponent* BB = GetBlackboardComponent())\\n            {\\n                BB->SetValueAsObject(TEXT(\\\"TargetActor\\\"), PlayerPawn);\\n            }\\n            MoveToActor(PlayerPawn, /*AcceptanceRadius=*/100.f);\\n            SetFocus(PlayerPawn);\\n        }\\n    }\\n};\\n```\\n\\n이 모든 요소들이 결합되어, `AAIController`는 복잡하고 지능적인 AI 캐릭터를 만들어내는 강력한 기반이 됩니다.\\n\""],"names":["__vite_glob_1_3"],"mappings":"AAAA,MAAAA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;"}