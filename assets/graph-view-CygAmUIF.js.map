{"version":3,"file":"graph-view-CygAmUIF.js","sources":["../../src/components/graph/GraphControls.tsx","../../src/hooks/useGraphSimulation.ts","../../src/hooks/GraphRefsContext.tsx","../../src/components/ErrorBoundary.tsx","../../src/components/graph/GraphView.tsx"],"sourcesContent":["/**\n * src/components/graph/GraphControls.tsx\n * 책임: GraphView의 간단한 UI 컨트롤(예: missing 토글)을 제공한다.\n * - showMissing: 현재 missing 노드를 표시할지 여부\n * - onToggleShowMissing: 토글 콜백\n *\n * 주석 규칙: 작은 재사용 컴포넌트는 prop 의미를 상단에 명확히 적습니다.\n */\n/**\n * src/components/graph/GraphControls.tsx\n * 책임: GraphView의 토글 UI(예: missing 노드 표시) 제공\n * props: showMissing (boolean), onToggleShowMissing()\n * 한글 설명: 간단한 UI 컴포넌트로 외부 상태를 제어합니다.\n */\nimport React from 'react'\nimport './GraphControls.css'\n\ntype Props = {\n  showMissing: boolean\n  onToggleShowMissing: () => void\n}\n\nconst GraphControls: React.FC<Props> = ({ showMissing, onToggleShowMissing }) => {\n  return (\n    <div className=\"graph-controls\">\n      <label className=\"graph-controls-label\">\n        <input\n          className=\"graph-controls-checkbox\"\n          type=\"checkbox\"\n          checked={showMissing}\n          onChange={onToggleShowMissing}\n        />\n  누락 항목 포함\n      </label>\n    </div>\n  )\n}\n\nexport default React.memo(GraphControls)\n","import { useCallback, useEffect, useRef } from 'react'\nimport * as d3 from 'd3'\nimport logger from '../lib/logger'\nimport type { RefHandle } from './types'\nimport type { GraphNode } from '../types'\nimport type { LinkDatum, NodeDatum } from './types'\n\ntype Params = {\n  svgRef: RefHandle<SVGSVGElement | null>\n  dims: { w: number; h: number }\n  width: number\n  height: number\n  data: { nodes: GraphNode[]; links: LinkDatum[] }\n  onNodeClick?: (node: { id: string; title: string; missing?: boolean }) => void\n  onBackgroundClick?: () => void\n  providedRefs?: import('./types').GraphRefs | undefined\n  showMissing?: boolean\n  selectedNodeId?: string | null\n}\n\n// Minimal, standards-aligned simulation hook conforming to 그래프요구사항.md.\n// Intent: simple, well-typed, easy to audit and maintain.\nexport default function useGraphSimulation(params: Params) {\n  const { svgRef, dims, width, height, data, onNodeClick, onBackgroundClick } = params\n\n  const simulationRef = useRef<d3.Simulation<NodeDatum, LinkDatum> | null>(null)\n  const nodeSelRef = useRef<d3.Selection<SVGCircleElement, NodeDatum, SVGGElement, unknown> | null>(null)\n  const linkSelRef = useRef<d3.Selection<SVGLineElement, LinkDatum, SVGGElement, unknown> | null>(null)\n  const labelSelRef = useRef<d3.Selection<SVGTextElement, NodeDatum, SVGGElement, unknown> | null>(null)\n  const kickTimerRef = useRef<number | null>(null)\n\n  const prefersReducedMotion = typeof window !== 'undefined' && 'matchMedia' in window\n    ? window.matchMedia('(prefers-reduced-motion: reduce)').matches\n    : false\n\n  // Tunable thresholds (kept intentionally simple and local)\n  const NODE_SPEED_THRESHOLD = 0.5\n  const IDLE_TICKS_TO_STOP = 5\n  const NODE_IDLE_RATIO = 0.9\n\n  const KICK_ALPHA_TARGET = 0.3\n  const KICK_RELAX_TO = 0.05\n  const KICK_RELAX_AFTER_MS = 1200\n\n  const renderPositions = useCallback(() => {\n    const l = linkSelRef.current\n    const n = nodeSelRef.current\n    const t = labelSelRef.current\n    if (!l || !n || !t) return\n    l\n      .attr('x1', d => (typeof d.source === 'string' ? 0 : (d.source as NodeDatum).x ?? 0))\n      .attr('y1', d => (typeof d.source === 'string' ? 0 : (d.source as NodeDatum).y ?? 0))\n      .attr('x2', d => (typeof d.target === 'string' ? 0 : (d.target as NodeDatum).x ?? 0))\n      .attr('y2', d => (typeof d.target === 'string' ? 0 : (d.target as NodeDatum).y ?? 0))\n    n.attr('cx', d => d.x ?? dims.w / 2).attr('cy', d => d.y ?? dims.h / 2)\n    t.attr('x', d => (d.x ?? dims.w / 2) + 10).attr('y', d => (d.y ?? dims.h / 2) + 4)\n  }, [dims.w, dims.h])\n\n  const kickSimulation = useCallback((sim: d3.Simulation<NodeDatum, LinkDatum> | null) => {\n    if (!sim) return\n    try {\n      // unpin auto-pinned nodes\n      const nodes = sim.nodes() as NodeDatum[]\n      for (const nd of nodes) {\n        if (nd._autoPinned) {\n          nd.fx = null\n          nd.fy = null\n          nd._autoPinned = false\n        }\n      }\n      sim.alpha(1)\n      sim.alphaTarget(KICK_ALPHA_TARGET)\n      sim.restart()\n      if (kickTimerRef.current) { window.clearTimeout(kickTimerRef.current); kickTimerRef.current = null }\n      kickTimerRef.current = window.setTimeout(() => {\n        try { sim.alphaTarget(KICK_RELAX_TO) } catch (e) { logger.debug('kick simulation relax failed', e) }\n        kickTimerRef.current = null\n      }, KICK_RELAX_AFTER_MS)\n    } catch (e) {\n      logger.debug('kickSimulation failed', e)\n    }\n  }, [])\n\n  const pauseSimulation = useCallback(() => {\n    try { simulationRef.current?.stop() } catch (e) { logger.debug('pauseSimulation failed', e) }\n  }, [])\n\n  const resumeSimulation = useCallback(() => {\n    try { simulationRef.current?.restart() } catch (e) { logger.debug('resumeSimulation failed', e) }\n  }, [])\n\n  useEffect(() => {\n    const svgEl = svgRef.current\n    if (!svgEl) return\n\n    const svg = d3.select(svgEl)\n    const W = dims.w || width\n    const H = dims.h || height\n\n    // create container groups if missing\n    let g = svg.select<SVGGElement>('g.zoom-layer')\n    if (g.empty()) {\n      svg.selectAll('*').remove()\n      svg.attr('viewBox', `0 0 ${W} ${H}`).attr('preserveAspectRatio', 'xMidYMid meet')\n      svg.insert('rect', ':first-child').attr('class', 'bg-rect').attr('x', 0).attr('y', 0).attr('width', W).attr('height', H).attr('fill', 'transparent')\n      g = svg.append('g').attr('class', 'zoom-layer')\n    }\n\n    const nodes = data.nodes as NodeDatum[]\n    const links = data.links as LinkDatum[]\n\n    // join elements\n    let linkGroup = g.select<SVGGElement>('g.links')\n    if (linkGroup.empty()) linkGroup = g.append('g').attr('class', 'links')\n    let nodeGroup = g.select<SVGGElement>('g.nodes')\n    if (nodeGroup.empty()) nodeGroup = g.append('g').attr('class', 'nodes')\n    let labelGroup = g.select<SVGGElement>('g.labels')\n    if (labelGroup.empty()) labelGroup = g.append('g').attr('class', 'labels')\n\n    const linkSel = linkGroup.selectAll('line').data(links)\n    linkSel.join(enter => enter.append('line').attr('class', 'link'), update => update, exit => exit.remove())\n    linkSelRef.current = linkGroup.selectAll('line')\n\n    const nodeSel = nodeGroup.selectAll('circle').data(nodes)\n    nodeSel.join(enter => enter.append('circle').attr('class', d => `node${d.missing ? ' missing' : ''}`).attr('r', 8).attr('fill', '#2563eb').attr('pointer-events', 'all')\n      .on('click', (ev, d) => { ev.stopPropagation(); if (!d.missing) onNodeClick?.({ id: d.id, title: d.title, missing: d.missing }) }),\n      update => update, exit => exit.remove())\n    nodeSelRef.current = nodeGroup.selectAll('circle')\n\n    const labelSel = labelGroup.selectAll('text').data(nodes)\n    labelSel.join(enter => enter.append('text').attr('class', 'label').attr('font-size', 11).attr('fill', '#c9d4e3').attr('pointer-events', 'none').text(d => d.title), update => update.text(d => d.title), exit => exit.remove())\n    labelSelRef.current = labelGroup.selectAll('text')\n\n    // simple simulation\n    const sim = d3.forceSimulation<NodeDatum>(nodes)\n      .force('link', d3.forceLink<NodeDatum, LinkDatum>(links).id(d => d.id).distance(120))\n      .force('charge', d3.forceManyBody().strength(-180))\n      .force('collision', d3.forceCollide<NodeDatum>().radius(18).strength(0.7))\n      .force('x', d3.forceX(W / 2).strength(0.05))\n      .force('y', d3.forceY(H / 2).strength(0.05))\n      .velocityDecay(0.6)\n      .alpha(1)\n      .alphaDecay(0.05)\n\n    simulationRef.current = sim\n\n    sim.on('tick', () => {\n      try { renderPositions() } catch (e) { logger.debug('renderPositions failed', e) }\n      try {\n        const cur = sim.nodes() as NodeDatum[]\n        let autoPinned = 0\n        let dragging = 0\n        for (const n of cur) {\n          n._idleTicks = (n._idleTicks ?? 0)\n          n._autoPinned = !!n._autoPinned\n          if (n._dragging) dragging++\n          const s = Math.sqrt((n.vx ?? 0) ** 2 + (n.vy ?? 0) ** 2)\n          if (s < NODE_SPEED_THRESHOLD) n._idleTicks = (n._idleTicks ?? 0) + 1\n          else n._idleTicks = 0\n          if (!n._autoPinned && !n._dragging && (n._idleTicks ?? 0) >= IDLE_TICKS_TO_STOP) {\n            try { n.vx = 0; n.vy = 0; n.fx = n.x ?? null; n.fy = n.y ?? null } catch (e) { logger.debug('pin failed', e) }\n            n._autoPinned = true\n          }\n          if (n._autoPinned) autoPinned++\n        }\n        const ratio = cur.length > 0 ? autoPinned / cur.length : 1\n        if (ratio >= NODE_IDLE_RATIO && dragging === 0) {\n          try { sim.stop() } catch (e) { logger.debug('sim stop failed', e) }\n        }\n      } catch (e) { logger.debug('tick handler failed', e) }\n    })\n\n    // basic drag\n    try {\n      nodeSelRef.current?.call(\n        d3.drag<SVGCircleElement, NodeDatum>()\n          .on('start', (_ev, d) => { d._dragging = true; d.fx = d.x ?? null; d.fy = d.y ?? null })\n          .on('drag', (ev, d) => { const e = ev as unknown as { x: number; y: number }; d.fx = e.x; d.fy = e.y; kickSimulation(sim) })\n          .on('end', (_ev, d) => { d._dragging = false; d.fx = null; d.fy = null })\n      )\n    } catch (e) { logger.debug('drag setup failed', e) }\n\n    try { svg.select<SVGRectElement>('.bg-rect').on('click', (ev) => { ev.stopPropagation(); onBackgroundClick?.() }) } catch (e) { logger.debug('bg handler failed', e) }\n\n    if (!prefersReducedMotion) kickSimulation(sim)\n\n    return () => {\n      try { sim.stop() } catch (e) { logger.debug('cleanup sim stop failed', e) }\n      try { nodeSelRef.current = null } catch (e) { logger.debug('cleanup nodeSel clear failed', e) }\n      try { linkSelRef.current = null } catch (e) { logger.debug('cleanup linkSel clear failed', e) }\n      try { labelSelRef.current = null } catch (e) { logger.debug('cleanup labelSel clear failed', e) }\n      try { simulationRef.current = null } catch (e) { logger.debug('cleanup simRef clear failed', e) }\n      if (kickTimerRef.current) { window.clearTimeout(kickTimerRef.current); kickTimerRef.current = null }\n    }\n  }, [svgRef, dims.w, dims.h, width, height, data, onNodeClick, onBackgroundClick, kickSimulation, renderPositions, prefersReducedMotion])\n\n  return { kickSimulation, pauseSimulation, resumeSimulation, prefersReducedMotion }\n}\n","/* eslint-disable react-refresh/only-export-components */\nimport React from 'react'\nimport type { GraphRefs } from './types'\n\nexport const GraphRefsContext = React.createContext<GraphRefs | null>(null)\n\nexport const GraphRefsProvider: React.FC<{ value: GraphRefs; children?: React.ReactNode }> = ({ value, children }) => (\n  <GraphRefsContext.Provider value={value}>{children}</GraphRefsContext.Provider>\n)\n","import React from 'react'\nimport logger from '../lib/logger'\n\ntype Props = { children: React.ReactNode }\ntype State = { hasError: boolean }\n\nexport default class ErrorBoundary extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true }\n  }\n\n  componentDidCatch(error: unknown, info: unknown) {\n    try {\n      logger.error('ErrorBoundary caught error', error, info)\n    } catch {\n      // fallback (best-effort)\n      console.error('ErrorBoundary caught error', error, info)\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div role=\"alert\" style={{ padding: 20 }}>\n          <h3>오류가 발생했습니다.</h3>\n          <p>그래프를 렌더링하는 중 문제가 발생했습니다. 새로고침하거나 문제를 보고해주세요.</p>\n          <button\n            onClick={() => {\n              try {\n                const text = 'Graph error encountered at ' + new Date().toISOString()\n                navigator.clipboard?.writeText(text)\n                alert('오류 정보가 클립보드에 복사되었습니다. 이 내용을 공유해주세요.')\n              } catch {\n                alert('오류 정보를 복사할 수 없습니다.')\n              }\n            }}\n          >\n            오류 복사하기\n          </button>\n        </div>\n      )\n    }\n    return this.props.children\n  }\n}\n","/**\n * src/components/graph/GraphView.tsx\n * 책임: Graph SVG 렌더링 및 GraphControls 연결을 담당하는 UI 컴포넌트\n * 주요 props: data: GraphData, onNodeClick?, onBackgroundClick?\n * 한글 설명: D3 시뮬레이션 훅(`useGraphSimulation`)에 DOM refs를 전달합니다.\n */\nimport React, { memo, useCallback, useEffect, useRef, useState } from 'react'\nimport logger from '../../lib/logger'\nimport * as d3 from 'd3'\nimport type { GraphData, GraphNode } from '../../types'\nimport './GraphView.css'\nimport GraphControls from './GraphControls'\nimport useGraphSimulation from '../../hooks/useGraphSimulation'\nimport { GraphRefsProvider } from '../../hooks/GraphRefsContext'\nimport ErrorBoundary from '../ErrorBoundary'\n\ntype NodeDatum = GraphNode & {\n  x?: number\n  y?: number\n  vx?: number\n  vy?: number\n  fx?: number | null\n  fy?: number | null\n}\n\ntype LinkDatum = {\n  source: string | NodeDatum\n  target: string | NodeDatum\n}\n\ntype Props = {\n  data: GraphData\n  width?: number\n  height?: number\n  onNodeClick?: (node: { id: string; title: string; missing?: boolean }) => void\n  onBackgroundClick?: () => void\n  selectedNodeId?: string | null\n}\n\nconst GraphView: React.FC<Props> = ({ data, width = 800, height = 520, onNodeClick, onBackgroundClick, selectedNodeId = null }) => {\n  const svgRef = useRef<SVGSVGElement | null>(null)\n  const wrapRef = useRef<HTMLDivElement | null>(null)\n  const [dims, setDims] = useState<{ w: number; h: number }>({ w: width, h: height })\n  const initializedRef = useRef(false)\n  const kickTimerRef = useRef<number | null>(null)\n  const zoomRef = useRef<d3.ZoomBehavior<SVGSVGElement, unknown> | null>(null)\n  const simulationRef = useRef<d3.Simulation<NodeDatum, LinkDatum> | null>(null)\n  // track whether simulation is currently stopped; initialize to false\n  const simulationStoppedRef = useRef<boolean>(false)\n  const nodeSelRef = useRef<d3.Selection<SVGCircleElement, NodeDatum, SVGGElement, unknown> | null>(null)\n  const linkSelRef = useRef<d3.Selection<SVGLineElement, LinkDatum, SVGGElement, unknown> | null>(null)\n  const labelSelRef = useRef<d3.Selection<SVGTextElement, NodeDatum, SVGGElement, unknown> | null>(null)\n  const [showMissing, setShowMissing] = useState(true)\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false)\n  const panInProgressRef = useRef<boolean | null>(false)\n\n  // 배경 클릭은 훅에서 삽입하는 bg-rect가 처리합니다. 래퍼에서는 중복 처리하지 않습니다.\n\n  useEffect(() => {\n    const el = wrapRef.current\n    if (!el) return\n    const ro = new ResizeObserver(entries => {\n      const cr = entries[0]?.contentRect\n      if (cr) setDims({ w: Math.max(320, cr.width), h: Math.max(240, cr.height) })\n    })\n    ro.observe(el)\n    return () => ro.disconnect()\n  }, [])\n\n  // Pause simulation when the graph container is offscreen to save CPU\n  useEffect(() => {\n    const svgEl = svgRef.current\n    if (!svgEl || typeof IntersectionObserver === 'undefined') return\n    const simRefCurrent = simulationRef.current\n    const observer = new IntersectionObserver(entries => {\n      const e = entries[0]\n      try {\n        if (e && !e.isIntersecting) {\n          // pause simulation and mark stopped so hover handlers are allowed\n          try {\n            simulationRef.current?.stop()\n            simulationStoppedRef.current = true\n          } catch (err) { logger.debug('GraphView: stop failed', err) }\n        } else {\n          try {\n            if (simulationRef.current) {\n              simulationRef.current.alpha(0.1).restart()\n              simulationStoppedRef.current = false\n            }\n          } catch (err) { logger.debug('GraphView: restart failed', err) }\n        }\n      } catch (err) {\n        logger.debug('GraphView: intersection handler failed', err)\n      }\n    }, { threshold: 0 })\n    observer.observe(svgEl)\n    return () => {\n      try { simRefCurrent?.stop() } catch (err) { logger.debug('GraphView: cleanup stop failed', err) }\n      try { observer.disconnect() } catch (err) { logger.debug('GraphView: observer disconnect failed', err) }\n    }\n  }, [svgRef, simulationRef])\n\n  // provide refs via context to reduce prop drilling\n  const refsValue = {\n    initializedRef,\n    kickTimerRef,\n    zoomRef,\n    simulationRef,\n    nodeSelRef,\n    linkSelRef,\n    labelSelRef,\n    simulationStoppedRef,\n  panInProgressRef,\n  }\n\n  const [lastClickedNodeId, setLastClickedNodeId] = useState<string | null>(null)\n\n  // wrap onNodeClick so we can react locally (vertical panning) while still\n  // forwarding to consumer handlers\n  const forwardedOnNodeClick = useCallback((node: { id: string; title: string; missing?: boolean }) => {\n    try { setLastClickedNodeId(node.id) } catch (e) { logger.debug('GraphView: setLastClickedNodeId failed', e) }\n    try { onNodeClick?.(node) } catch (e) { logger.debug('GraphView: forwarded onNodeClick failed', e) }\n  }, [onNodeClick])\n\n  const simControls = useGraphSimulation({\n    svgRef,\n    dims,\n    width,\n    height,\n    data: { nodes: data.nodes, links: data.links },\n    onNodeClick: forwardedOnNodeClick,\n    onBackgroundClick,\n  showMissing,\n  providedRefs: refsValue,\n  selectedNodeId,\n  })\n\n  // When a node is clicked, pan vertically so the node is centered vertically\n  useEffect(() => {\n    if (!lastClickedNodeId) return\n    const svgEl = svgRef.current\n    const z = zoomRef.current\n    const nodeSel = nodeSelRef.current\n    if (!svgEl || !z || !nodeSel) return\n\n    try {\n      // Prefer using the node's actual screen position (DOM) to avoid\n      // discrepancies between the simulation's datum and rendered pixel position\n      const sel = nodeSel.filter((nd: NodeDatum) => nd.id === lastClickedNodeId)\n      if (!sel || typeof sel.node !== 'function' || !sel.node()) return\n      const nodeEl = sel.node() as SVGCircleElement\n      const nodeRect = nodeEl.getBoundingClientRect()\n      if (!nodeRect) return\n\n      const svg = d3.select(svgEl)\n      const cur = d3.zoomTransform(svg.node() as SVGSVGElement)\n      const k = cur.k || 1\n\n      // compute how many screen pixels we need to move the current transform\n      // so the node's visual center is at the center of the left half screen\n      // (considering insight drawer takes right 50vw when open)\n      const nodeScreenX = nodeRect.left + nodeRect.width / 2\n      const nodeScreenY = nodeRect.top + nodeRect.height / 2\n      \n      // Target: center of left half of viewport\n      // Left half width = 50vw when drawer is open, so center is at 25vw from left\n      const viewportWidth = (typeof window !== 'undefined' && typeof window.innerWidth === 'number') ? window.innerWidth : 800\n      const viewportHeight = (typeof window !== 'undefined' && typeof window.innerHeight === 'number') ? window.innerHeight : 600\n      const leftHalfCenterX = viewportWidth * 0.25  // 25% from left (center of left half)\n      const leftHalfCenterY = viewportHeight * 0.5   // 50% from top (vertical center)\n\n      // delta in screen pixels to move node to left half center\n      const deltaScreenX = leftHalfCenterX - nodeScreenX\n      const deltaScreenY = leftHalfCenterY - nodeScreenY\n\n      // applying translate by delta to current transform will shift the node accordingly\n      const tx = cur.x + deltaScreenX\n      const ty = cur.y + deltaScreenY\n      const target = d3.zoomIdentity.translate(tx, ty).scale(k)\n\n      try {\n        // mark pan in progress to suppress pointer/hover noise\n        try {\n          panInProgressRef.current = true\n        } catch (err) {\n          logger.debug('GraphView: failed to mark panInProgress start', err)\n        }\n\n        const maybeTransform = (zoomRef.current as unknown as { transform?: (sel: unknown, t: d3.ZoomTransform) => void }).transform\n        if (typeof maybeTransform === 'function') {\n          svg.transition()\n            .duration(400)\n            .call(maybeTransform as unknown as (transition: d3.Transition<SVGSVGElement, unknown, null, undefined>, t: d3.ZoomTransform) => void, target)\n            .on('end interrupt', () => {\n              try { panInProgressRef.current = false } catch (err) { logger.debug('GraphView: failed to clear panInProgress', err) }\n            })\n        } else {\n          const g = svg.select<SVGGElement>('g.zoom-layer')\n          g.transition()\n            .duration(400)\n            .attr('transform', `translate(${tx},${ty}) scale(${k})`)\n            .on('end interrupt', () => {\n              try { panInProgressRef.current = false } catch (err) { logger.debug('GraphView: failed to clear panInProgress', err) }\n            })\n        }\n      } catch (e) {\n  try { panInProgressRef.current = false } catch (err) { logger.debug('GraphView: failed to clear panInProgress on error', err) }\n        logger.debug('GraphView: vertical pan failed', e)\n      }\n    } catch (e) {\n      logger.debug('GraphView: vertical pan setup failed', e)\n    }\n  }, [lastClickedNodeId, dims.h, height, panInProgressRef])\n\n  useEffect(() => {\n    // detect prefers-reduced-motion and reflect in local state\n    try {\n      if (typeof window !== 'undefined' && 'matchMedia' in window) {\n        const mq: MediaQueryList = window.matchMedia('(prefers-reduced-motion: reduce)')\n        setPrefersReducedMotion(!!mq.matches)\n        const handler = (ev: MediaQueryListEvent) => setPrefersReducedMotion(!!ev.matches)\n        // newer browsers support addEventListener\n        if (typeof mq.addEventListener === 'function') mq.addEventListener('change', handler)\n        else {\n          // legacy browsers implement addListener/removeListener on MediaQueryList\n          type LegacyMQL = MediaQueryList & {\n            addListener?: (l: (e: MediaQueryListEvent) => void) => void\n            removeListener?: (l: (e: MediaQueryListEvent) => void) => void\n          }\n          const lmq = mq as LegacyMQL\n          if (typeof lmq.addListener === 'function') lmq.addListener(handler)\n        }\n        return () => {\n          if (typeof mq.removeEventListener === 'function') mq.removeEventListener('change', handler)\n          else {\n            const lmq = mq as MediaQueryList & { removeListener?: (l: (e: MediaQueryListEvent) => void) => void }\n            if (typeof lmq.removeListener === 'function') lmq.removeListener(handler)\n          }\n        }\n      }\n    } catch (err) {\n      logger.debug('GraphView: mq setup failed', err)\n    }\n  }, [])\n\n  // ensure simulation is paused on unmount or when pref change requires it\n  useEffect(() => {\n    if (prefersReducedMotion) {\n      try { simControls.pauseSimulation?.() } catch (err) { logger.debug('GraphView: pauseSimulation failed', err) }\n    }\n    return () => {\n      try { simControls.pauseSimulation?.() } catch (err) { logger.debug('GraphView: cleanup pauseSimulation failed', err) }\n    }\n  }, [prefersReducedMotion, simControls])\n\n  // focus panning removed: previous implementation caused coordinate mismatches.\n  // Re-implementation note: compute an absolute viewport target (window or modal-centered),\n  // convert that into SVG-local coordinates, and call the d3 zoom behavior's transform method.\n\n\n  return (\n    <ErrorBoundary>\n      <GraphRefsProvider value={refsValue}>\n        <div ref={wrapRef} className=\"graph-wrap\">\n          <svg ref={svgRef} role=\"img\" aria-label=\"graph view\" />\n\n          <GraphControls showMissing={showMissing} onToggleShowMissing={useCallback(() => setShowMissing((v) => !v), [])} />\n        </div>\n      </GraphRefsProvider>\n    </ErrorBoundary>\n  )\n}\n\nexport default memo(GraphView)\n"],"names":["GraphControls","showMissing","onToggleShowMissing","jsxs","jsx","GraphControls$1","React","useGraphSimulation","params","svgRef","dims","width","height","data","onNodeClick","onBackgroundClick","simulationRef","useRef","nodeSelRef","linkSelRef","labelSelRef","kickTimerRef","prefersReducedMotion","NODE_SPEED_THRESHOLD","IDLE_TICKS_TO_STOP","NODE_IDLE_RATIO","KICK_ALPHA_TARGET","KICK_RELAX_TO","KICK_RELAX_AFTER_MS","renderPositions","useCallback","l","n","t","d","kickSimulation","sim","nodes","nd","e","logger","pauseSimulation","resumeSimulation","useEffect","svgEl","svg","d3.select","W","H","g","links","linkGroup","nodeGroup","labelGroup","enter","update","exit","ev","d3.forceSimulation","d3.forceLink","d3.forceManyBody","d3.forceCollide","d3.forceX","d3.forceY","cur","autoPinned","dragging","d3.drag","_ev","GraphRefsContext","GraphRefsProvider","value","children","ErrorBoundary","props","error","info","text","GraphView","selectedNodeId","wrapRef","setDims","useState","initializedRef","zoomRef","simulationStoppedRef","setShowMissing","setPrefersReducedMotion","panInProgressRef","el","ro","entries","cr","simRefCurrent","observer","err","refsValue","lastClickedNodeId","setLastClickedNodeId","forwardedOnNodeClick","node","simControls","z","nodeSel","sel","nodeRect","d3.zoomTransform","k","nodeScreenX","nodeScreenY","viewportWidth","viewportHeight","leftHalfCenterX","leftHalfCenterY","deltaScreenX","deltaScreenY","tx","ty","target","d3.zoomIdentity","maybeTransform","mq","handler","lmq","v","GraphView$1","memo"],"mappings":"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"}