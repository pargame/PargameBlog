{"version":3,"mappings":"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","names":["remarkWikiLinkToSpan","tree","visitParents","node","ancestors","a","parent","index","newNodes","splitWikiTokens","text","out","re","lastIndex","m","raw","pipeIndex","target","label","linkNode","LazyMarkdown","React","__vitePreload","n","LocalErrorBoundary","props","error","logger","jsx","InsightDrawer","collection","insightId","onWikiLinkClick","scrollRef","useRef","doc","setDoc","useState","knownIds","setKnownIds","useEffect","mounted","docMod","found","mod","items","i","Suspense","href","children","textFromChildren","targetFromHref","labelText","looksLikeWikiToken","isWiki","base","missing","e","jsxs","InsightDrawer$1","memo"],"ignoreList":[],"sources":["../../src/lib/remarkWikiLinkToSpan.ts","../../src/components/InsightDrawer.tsx"],"sourcesContent":["/**\n * src/lib/remarkWikiLinkToSpan.ts\n * 책임: remark 플러그인으로서 위키링크 문법을 링크 노드로 변환\n * 주요 exports: default remarkWikiLinkToSpan\n * 한글 설명: [[Target|Label]] 형태를 `wikilink:Target` URL을 가진 링크 노드로 변환합니다.\n */\n\n// Minimal remark plugin: transform text tokens like [[Target]] into link nodes\n// with url scheme 'wikilink:Target'. We'll render them as <span class=\"wikilink\">Target</span>.\n\nimport { visitParents } from 'unist-util-visit-parents'\n\nfunction remarkWikiLinkToSpan() {\n  return (tree: unknown) => {\n    const root = tree as { type?: string; children?: unknown[] }\n\n    visitParents(root as never, 'text', (node: { value?: unknown }, ancestors: Array<{ type?: string; children?: unknown[] }>) => {\n      if (!node || typeof node.value !== 'string') return\n      if (!node.value.includes('[[')) return\n\n      // Don't process inside existing links\n      if (ancestors.some((a) => a && (a.type === 'link' || a.type === 'linkReference'))) {\n        return\n      }\n\n  const parent = ancestors[ancestors.length - 1]\n  if (!parent || !Array.isArray(parent.children)) return\n\n  const index = parent.children.indexOf(node as unknown as never)\n      if (index === -1) return\n\n  const newNodes = splitWikiTokens(node.value)\n      \n  ;(parent.children as unknown[]).splice(index, 1, ...newNodes as unknown[])\n    })\n\n    \n  }\n}\n\nfunction splitWikiTokens(text: string): Array<{ type: string; url?: string; title?: null; children?: Array<{ type: string; value: string }>; value?: string }> {\n  const out: Array<{ type: string; url?: string; title?: null; children?: Array<{ type: string; value: string }>; value?: string }> = []\n  const re = /\\[\\[([^\\]]+)\\]\\]/g\n  let lastIndex = 0\n  let m: RegExpExecArray | null\n  \n  while ((m = re.exec(text))) {\n    if (m.index > lastIndex) {\n      out.push({ type: 'text', value: text.slice(lastIndex, m.index) })\n    }\n    \n    const raw = m[1].trim()\n    const pipeIndex = raw.indexOf('|')\n    const target = (pipeIndex >= 0 ? raw.slice(0, pipeIndex) : raw).trim()\n    const label = (pipeIndex >= 0 ? raw.slice(pipeIndex + 1) : target).trim()\n    \n    const linkNode = { \n      type: 'link', \n      url: `wikilink:${target}`, \n      title: null, \n      children: [{ type: 'text', value: label }] \n    }\n    \n    out.push(linkNode)\n    lastIndex = m.index + m[0].length\n  }\n  \n  if (lastIndex < text.length) {\n    out.push({ type: 'text', value: text.slice(lastIndex) })\n  }\n  \n  return out\n}\n\nexport default remarkWikiLinkToSpan\n","/**\n * src/components/InsightDrawer.tsx\n * 책임: 선택된 노드의 문서를 옆드로어로 로드·렌더링\n * 주요 props: collection, insightId, onWikiLinkClick\n * 한글 설명: 문서 로드와 렌더링은 lazy import와 Suspense로 안전하게 처리합니다.\n */\n\nimport React, { Suspense, memo, useEffect, useRef, useState } from 'react'\nimport logger from '../lib/logger'\n// react-markdown's types vary across versions; accept a loose plugin type locally\n// Loose plugin type using unknown to avoid `any` lint rule; cast to expected runtime shape when used.\n// heavy modules will be dynamically imported below\nconst LazyMarkdown = React.lazy(async () => {\n  const mod = await import('react-markdown')\n  return { default: mod.default }\n})\n// light util stays static\nimport remarkWikiLinkToSpan from '../lib/remarkWikiLinkToSpan'\n\ntype Doc = { content: string }\n\ninterface InsightDrawerProps {\n  collection: string\n  insightId: string | null\n  onWikiLinkClick: (target: string) => void\n}\n\n// Small local error boundary to prevent the entire modal from going blank\nclass LocalErrorBoundary extends React.Component<{\n  children: React.ReactNode\n}, { hasError: boolean; error?: Error }> {\n  constructor(props: { children: React.ReactNode }) {\n    super(props)\n    this.state = { hasError: false }\n  }\n  static getDerivedStateFromError() {\n    return { hasError: true }\n  }\n  componentDidCatch(error: Error) {\n    // route via logger so behavior can be controlled by environment\n    logger.error('InsightDrawer render error:', error)\n  }\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"suspense-fallback-small\">\n          문서 렌더링 중 오류가 발생했습니다.\n        </div>\n      )\n    }\n    return this.props.children as React.ReactElement\n  }\n}\n\nconst InsightDrawer: React.FC<InsightDrawerProps> = ({ \n  collection, \n  insightId, \n  onWikiLinkClick \n}) => {\n  const scrollRef = useRef<HTMLDivElement | null>(null)\n  const [doc, setDoc] = useState<Doc | null>(null)\n  // No remark-gfm in the drawer to avoid runtime plugin `this` issues;\n  // GFM support remains in the main PostPage which loads remark-gfm safely.\n  const [knownIds, setKnownIds] = useState<Set<string>>(new Set())\n\n  useEffect(() => {\n    let mounted = true\n  ;(async () => {\n  // load doc lazily\n      try {\n        const docMod = await import('../lib/doc')\n        const found = insightId ? docMod.getDocFromCollection(collection, insightId) : null\n        if (mounted) setDoc(found ?? null)\n      } catch {\n        if (mounted) setDoc(null)\n      }\n  // Note: intentionally not loading `remark-gfm` here - it can require\n  // a unified processor `this` which may not be available in this lazy\n  // environment and caused blank modal crashes. PostPage handles GFM.\n    })()\n    return () => { mounted = false }\n  }, [collection, insightId])\n\n  // Load list of available doc ids for this collection to style missing links differently\n  useEffect(() => {\n    let mounted = true\n    ;(async () => {\n      try {\n        const mod = await import('../lib/contentIndex')\n        if (mod.getContentItemsForCollectionAsync) {\n          const items = await mod.getContentItemsForCollectionAsync(collection)\n          if (!mounted) return\n          setKnownIds(new Set(items.map(i => i.slug)))\n        } else {\n          if (!mounted) return\n          setKnownIds(new Set())\n        }\n      } catch {\n        if (!mounted) return\n        setKnownIds(new Set())\n      }\n    })()\n    return () => { mounted = false }\n  }, [collection])\n\n  // When switching doc, scroll to top of drawer\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = 0\n    }\n  }, [insightId])\n\n  if (!insightId) {\n    return (\n      <aside className=\"insight-drawer\" onClick={e => e.stopPropagation()}>\n        <div className=\"insight-empty\">노드를 클릭하면 문서가 여기 열립니다.</div>\n      </aside>\n    )\n  }\n  if (!doc) {\n    return (\n      <aside className=\"insight-drawer open\" onClick={e => e.stopPropagation()}>\n        <div className=\"insight-content\">\n          <div className=\"insight-scroll\">\n            <div className=\"insight-empty\">요청한 문서를 찾을 수 없습니다.{' '}\n              {insightId ? <em>({insightId})</em> : null}\n            </div>\n          </div>\n        </div>\n      </aside>\n    )\n  }\n\n  return (\n    <aside \n      className=\"insight-drawer open\" \n      onClick={(e) => {\n        // Prevent clicks inside the drawer from bubbling to the backdrop\n        e.stopPropagation()\n      }}\n    >\n      <div className=\"insight-content\">\n        <div className=\"insight-scroll\" ref={scrollRef}>\n          <Suspense fallback={<div className=\"suspense-fallback-small\">문서 렌더링 준비중…</div>}>\n          <LocalErrorBoundary>\n          <LazyMarkdown\n            remarkPlugins={[remarkWikiLinkToSpan]}\n            components={{\n              a: ({ href, children }: { href?: string; children?: React.ReactNode }) => {\n                // Helper to recursively extract plain text from children for heuristic\n                const textFromChildren = (node: unknown): string => {\n                  if (node == null) return ''\n                  if (typeof node === 'string') return node\n                  if (Array.isArray(node)) return (node as unknown[]).map(textFromChildren).join('')\n                  if (typeof node === 'object' && node !== null && 'props' in (node as Record<string, unknown>)) {\n                    return textFromChildren((node as { props?: { children?: unknown } }).props?.children)\n                  }\n                  return ''\n                }\n\n                // Determine target either from href (wikilink:Target) or from child text\n                let targetFromHref: string | null = null\n                if (href && href.startsWith('wikilink:')) {\n                  targetFromHref = href.slice('wikilink:'.length)\n                }\n                const labelText = textFromChildren(children).trim()\n\n                // Accept Unicode letters/numbers as valid wiki token text (allows 한글, etc.)\n                const looksLikeWikiToken = (!href || href === '') && !!labelText && /^[\\p{L}\\p{N}_.-]+$/u.test(labelText)\n                const isWiki = !!targetFromHref || looksLikeWikiToken\n                const target = targetFromHref || labelText\n\n                if (isWiki && target) {\n                  // Determine missing by checking current collection's known ids\n                  const base = target.split('#')[0].trim()\n                  const missing = !knownIds.has(base)\n                  return (\n                    <span\n                      className={`wikilink${missing ? ' missing' : ''}`}\n                      data-target={target}\n                      title={missing ? '문서를 찾을 수 없습니다' : undefined}\n                      onClick={(e) => {\n                        e.preventDefault()\n                        if (onWikiLinkClick) onWikiLinkClick(target)\n                      }}\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter' || e.key === ' ') {\n                          e.preventDefault()\n                          if (onWikiLinkClick) onWikiLinkClick(target)\n                        }\n                      }}\n                      role=\"button\"\n                      tabIndex={0}\n                    >\n                      {children as React.ReactNode}\n                    </span>\n                  )\n                }\n                // 빈 href는 자동 무시: 앵커 대신 텍스트만 렌더\n                if (!href) {\n                  return <span>{children as React.ReactNode}</span>\n                }\n                return <a href={href}>{children as React.ReactNode}</a>\n              },\n            }}\n          >\n            {doc?.content || ''}\n          </LazyMarkdown>\n          </LocalErrorBoundary>\n          </Suspense>\n        </div>\n      </div>\n    </aside>\n  )\n}\n\nexport default memo(InsightDrawer)\n"],"file":"assets/insight-drawer-BgRSZHwR.js"}