const n="---\ntitle: 'UInputModifier'\ndate: '2025-08-17T16:17:41+09:00'\n---\n> **플레이어로부터 받은 원시 입력 값을 '가공'하여 [[UInputAction]]에 전달하는 '필터' 또는 '변환기'입니다.** 마우스 움직임에 민감도를 적용하거나, 컨트롤러 스틱의 데드존을 처리하고, 특정 축의 값을 반전시키는 등, 입력의 원시 데이터를 실제 게임에 사용하기 적합한 형태로 정제하는 역할을 합니다.\n\n### **1. 주요 역할 및 책임**\n> **게임패드 아날로그 스틱의 미세한 떨림을 무시하는 `Dead Zone`처럼, 불필요한 노이즈를 제거하여 입력의 정확도를 높입니다. 실무 팁: 구현 시 성능과 안정성에 유의하세요.**\n* **입력 값 정제 (Refining Input Values)**:\n	게임패드 아날로그 스틱의 미세한 떨림을 무시하는 `Dead Zone`처럼, 불필요한 노이즈를 제거하여 입력의 정확도를 높입니다.\n* **입력 값 변환 (Transforming Input Values)**:\n	입력의 특정 축을 반전(`Negate`)시키거나, 축의 순서를 바꾸고(`Swizzle`), 특정 값으로 나누는 등, 입력 값을 게임의 좌표계나 요구사항에 맞게 변환합니다.\n* **입력 감도 조절 (Adjusting Input Sensitivity)**:\n	입력 값에 특정 배율을 곱하여(`Scalar`), 마우스나 조이스틱의 감도를 조절하는 기능을 구현합니다.\n* **시간 기반 평활화 (Time-based Smoothing)**:\n	입력 값을 시간에 따라 부드럽게 보간하여, 툭툭 끊어지는 움직임을 부드럽게 만듭니다.\n\n### **2. 주요 기본 모디파이어 종류**\n> **입력 값이 지정된 임계값보다 작을 경우, 이를 `0`으로 처리합니다. 실무 팁: 변경 시 성능·안정성·호환성을 먼저 검토하세요.**\n* **[[UInputModifier]] `Dead Zone`**:\n	입력 값이 지정된 임계값보다 작을 경우, 이를 `0`으로 처리합니다. 아날로그 스틱의 드리프트 현상을 방지하는 데 필수적입니다.\n* **[[UInputModifier]] `Scalar`**:\n	입력 값에 지정된 벡터나 실수를 곱합니다. 주로 입력 감도를 조절하는 데 사용됩니다. (예: `X=1.0`, `Y=2.0`으로 설정하면 `Y`축 감도가 2배가 됨)\n* **[[UInputModifier]] `Negate`**:\n	입력 값의 부호를 반전시킵니다. (예: `1.0`은 `-1.0`으로) `Y`축 입력을 뒤집는(`Invert Y-axis`) 옵션을 구현할 때 사용됩니다.\n* **[[UInputModifier]] `Swizzle Input Axis Values`**:\n	입력 값의 축 순서를 변경합니다. 예를 들어, `XY` 입력을 `YX`로 바꿀 수 있습니다.\n* **[[UInputModifier]] `Response Curve`**:\n	Curve 애셋을 사용하여 입력 값의 반응 곡선을 비선형적으로 조정합니다. 예를 들어, 스틱을 조금만 밀었을 때는 천천히 움직이다가, 끝까지 밀었을 때 급격하게 빨라지도록 만들 수 있습니다.\n\n### **3. 사용 방법**\n> **3. 사용 방법 실무 팁: 프로젝트 요구에 맞는 설정을 우선 검토하세요.**\n";export{n as default};
//# sourceMappingURL=UInputModifier-m--O7w9B.js.map
