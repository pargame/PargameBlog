{"version":3,"mappings":"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","names":["env","__vite_import_meta_env__","isDev","noop","logger","args","GraphModalContent","React","__vitePreload","GraphModalContent$2","GraphModal","collection","onClose","onNodeClick","onGraphBackgroundClick","focusNodeId","e","jsx","Suspense","GraphModal$1","memo","GraphView","selectedNodeId","leafName","graphData","setGraphData","useState","useEffect","mounted","d","contentItems","setContentItems","mod","items","query","setQuery","results","setResults","open","setOpen","inputRef","useRef","found","Fragment","jsxs","r","ev","GraphModalContent$1"],"ignoreList":[],"sources":["../../src/lib/logger.ts","../../src/components/graph/GraphModal.tsx","../../src/components/graph/GraphModalContent.tsx"],"sourcesContent":["/**\n * src/lib/logger.ts\n * 책임: 환경에 따라 로깅 레벨을 조절하는 간단한 로거\n * 주요 exports: default logger (debug, log, info, warn, error)\n * 한글 설명: DEV 환경에서는 console.debug/log/info를 사용하고, 프로덕션에서는 경고/오류만 노출합니다.\n */\n\ntype ViteLikeEnv = { DEV?: boolean; MODE?: string } | undefined\n\nconst env = (import.meta as unknown as { env?: ViteLikeEnv }).env\nconst isDev = Boolean(env && ((env.DEV ?? (env.MODE === 'development'))))\n\ntype LogFn = (...args: unknown[]) => void\n\nconst noop: LogFn = () => {}\n\nconst logger = {\n  debug: isDev ? ((...args: unknown[]) => console.debug(...args)) : noop,\n  log: isDev ? ((...args: unknown[]) => console.log(...args)) : noop,\n  info: isDev ? ((...args: unknown[]) => console.info(...args)) : noop,\n  // keep warnings and errors visible in prod so we surface problems\n  warn: (...args: unknown[]) => console.warn(...args),\n  error: (...args: unknown[]) => console.error(...args),\n}\n\nexport default logger\n","/**\n * src/components/graph/GraphModal.tsx\n * 책임: 그래프 뷰용 모달 래퍼. 모달 레이아웃과 비동기 로딩(Suspense)을 담당.\n * - collection: 렌더할 컬렉션 식별자\n * - onClose: 모달 종료 콜백\n * - onNodeClick: 노드 클릭 핸들러(상위 전달)\n *\n * 주석 규칙: public props는 인터페이스 상단에 간단한 설명을 기록합니다.\n */\nimport React, { Suspense, memo } from 'react'\n\nconst GraphModalContent = React.lazy(() => import('./GraphModalContent'))\n\ninterface GraphModalProps {\n  collection: string\n  onClose: () => void\n  onNodeClick: (node: { id: string; title: string; missing?: boolean }) => void\n  onGraphBackgroundClick: () => void\n  focusNodeId?: string | null\n}\n\nconst GraphModal: React.FC<GraphModalProps> = ({ collection, onClose, onNodeClick, onGraphBackgroundClick, focusNodeId }) => {\n  return (\n    <div className=\"modal\" onClick={e => e.stopPropagation()}>\n      <Suspense fallback={<div className=\"suspense-fallback\">모달 로딩중…</div>}>\n        <GraphModalContent\n          collection={collection}\n          onClose={onClose}\n          onNodeClick={onNodeClick}\n          onGraphBackgroundClick={onGraphBackgroundClick}\n          selectedNodeId={focusNodeId}\n        />\n      </Suspense>\n    </div>\n  )\n}\n\nexport default memo(GraphModal)\n","/**\n * src/components/graph/GraphModalContent.tsx\n * 책임: GraphModal 내부의 콘텐츠 로직을 처리한다.\n * - 비동기 로딩: graph builder, posts, contentIndex 등을 lazy import로 로드\n * - 검색/검색 결과 렌더링\n * - GraphView를 Suspense로 감싸 렌더링\n *\n * 주석 규칙: 비동기 경로(import ...) 및 중요한 상태값(useState/useEffect)을 단락 주석으로 설명합니다.\n */\nimport React, { memo, useEffect, useRef, useState } from 'react'\nimport './GraphModalContent.css'\nimport logger from '../../lib/logger'\nimport type { GraphData } from '../../types'\nconst GraphView = React.lazy(() => import('./GraphView'))\n\ninterface Props {\n  collection: string\n  onClose: () => void\n  onNodeClick: (node: { id: string; title: string; missing?: boolean }) => void\n  onGraphBackgroundClick: () => void\n  selectedNodeId?: string | null\n}\n\n  const GraphModalContent: React.FC<Props> = ({ collection, onClose, onNodeClick, onGraphBackgroundClick, selectedNodeId }) => {\n  // Derive a human-friendly label: only the last segment of collection path\n  const leafName = collection.split('/').filter(Boolean).pop() || collection\n  const [graphData, setGraphData] = useState<GraphData | null>(null)\n  useEffect(() => {\n    let mounted = true\n  ;(async () => {\n      try {\n        const gmod = await import('../../lib/graph')\n        const d = await gmod.buildGraphForCollectionAsync(collection)\n        if (!mounted) return\n        setGraphData(d)\n      } catch (_err) {\n        if (import.meta.env.DEV) logger.warn('[GraphModalContent] graph build failed', _err)\n      }\n    })()\n    return () => { mounted = false }\n  }, [collection])\n\n  // Removed global posts fetch: search is now strictly scoped to the current collection.\n\n  const [contentItems, setContentItems] = useState<{slug:string;title:string}[]>([])\n  useEffect(() => {\n    let mounted = true\n    ;(async () => {\n      try {\n        const mod = await import('../../lib/contentIndex')\n        if (!mod.getContentItemsForCollectionAsync) return\n        const items = await mod.getContentItemsForCollectionAsync(collection)\n        if (!mounted) return\n        setContentItems(items)\n      } catch (err) {\n        if (import.meta.env.DEV) logger.warn('[GraphModalContent] contentIndex load failed', err)\n      }\n    })()\n    return () => { mounted = false }\n  }, [collection])\n\n  const [query, setQuery] = useState('')\n  const [results, setResults] = useState<{slug:string;title:string}[]>([])\n  const [open, setOpen] = useState(false)\n  const inputRef = useRef<HTMLInputElement | null>(null)\n\n  useEffect(() => {\n    if (!query) {\n      setResults([])\n      return\n    }\n    ;(async () => {\n      try {\n        const searchMod = await import('../../lib/search')\n        const found = searchMod.searchItems(contentItems, query)\n        setResults(found)\n      } catch {\n        setResults([])\n      }\n    })()\n  }, [query, contentItems])\n\n  return (\n    <>\n      <div className=\"modal\" onClick={e => e.stopPropagation()}>\n        <div className=\"modal-header\">\n          <div className=\"graph-modal-header-left\">\n            <h2 className=\"graph-modal-title\">{leafName} · Graph</h2>\n          </div>\n\n          <div className=\"graph-modal-header-right\">\n            <div className=\"graph-modal-search-wrapper\">\n              <input\n                id=\"graph-search-input\"\n                name=\"graph-search\"\n                aria-label={`Search ${leafName}`}\n                autoComplete=\"off\"\n                ref={inputRef}\n                value={query}\n                onChange={e => { setQuery(e.target.value); setOpen(true) }}\n                onFocus={() => setOpen(true)}\n                placeholder={contentItems.length > 0 ? `Search ${leafName}...` : 'Search posts...'}\n                className=\"graph-search-input\"\n              />\n              {open && results.length > 0 && (\n                <div className=\"graph-search-results\">\n                  {results.map(r => (\n                    <div key={r.slug}\n                      onMouseDown={(ev) => { ev.preventDefault(); onNodeClick({ id: r.slug, title: r.title }) }}\n                      className=\"graph-search-result-item\">\n                      <div className=\"graph-search-result-title\">{r.title}</div>\n                      <div className=\"graph-search-result-slug\">{r.slug}</div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            <button className=\"icon\" aria-label=\"close\" onClick={onClose}>\n              ✕\n            </button>\n          </div>\n        </div>\n        <div className=\"modal-body\">\n          <div className=\"graph-modal-body\">\n            <React.Suspense fallback={<div className=\"suspense-fallback\">그래프 로딩 중…</div>}>\n              {graphData ? (\n                <GraphView\n                  data={graphData}\n                  onNodeClick={onNodeClick}\n                  onBackgroundClick={onGraphBackgroundClick}\n                  selectedNodeId={selectedNodeId}\n                />\n              ) : (\n                <div className=\"suspense-fallback\">그래프 데이터 준비 중…</div>\n              )}\n            </React.Suspense>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default memo(GraphModalContent)\n"],"file":"assets/graph-modal-DxypMPMx.js"}