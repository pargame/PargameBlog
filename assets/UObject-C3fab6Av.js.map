{"version":3,"file":"UObject-C3fab6Av.js","sources":["../../content/GraphArchives/UnrealEngine/UObject.md?raw"],"sourcesContent":["export default \"---\\ntitle: 'UObject'\\ndate: '2025-08-17T16:17:41+09:00'\\n---\\n> **언리얼 엔진의 모든 것을 구성하는 가장 근본적인 '원자(Atom)'입니다.** [[AActor]], [[UActorComponent]], 그리고 심지어 애셋 자체까지, 엔진 내에 존재하는 거의 모든 것은 `UObject`로부터 파생됩니다. `UObject`는 언리얼 엔진이 C++를 강력하게 확장하는 핵심적인 기반입니다.\\n\\n### **1. 주요 역할 및 책임**\\n> **`UCLASS()`, `UPROPERTY()`, `UFUNCTION()` 같은 매크로를 통해, 런타임에 자기 자신의 속성(변수)이나 함수에 대한 정보를 파악하고 조작할 수 있습니다. 실무 팁: 구현 시 성능과 안정성에 유의하세요.**\\n* **리플렉션 (Reflection)**:\\n\\t`UCLASS()`, `UPROPERTY()`, `UFUNCTION()` 같은 매크로를 통해, 런타임에 자기 자신의 속성(변수)이나 함수에 대한 정보를 파악하고 조작할 수 있습니다. 이는 디테일 패널, 블루프린트, 네트워크 복제, 가비지 컬렉션 등 언리얼의 거의 모든 시스템이 작동하는 기반 기술입니다.\\n* **가비지 컬렉션 (Garbage Collection)**:\\n\\t더 이상 아무도 참조하지 않는 `UObject`를 자동으로 감지하고 메모리에서 해제하여, 개발자가 수동으로 메모리를 관리하는 부담을 크게 줄여줍니다.\\n* **직렬화 (Serialization)**:\\n\\t`UObject`의 상태를 디스크에 저장(Save)하거나 메모리로 불러올(Load) 수 있습니다. 애셋을 파일로 저장하고, 게임을 저장/불러오기하는 기능의 근간이 됩니다.\\n* **에디터 연동 (Editor Integration)**:\\n\\t`UObject`로부터 파생된 클래스는 언리얼 에디터가 그 존재를 인지하고, 디테일 패널에 속성을 표시하거나 콘텐츠 브라우저에 애셋으로 표시하는 등 다양한 방식으로 상호작용할 수 있습니다.\\n* **블루프린트 연동 (Blueprint Integration)**:\\n\\t`UObject` 기반 클래스는 블루프린트에서 상속받아 확장하거나, 블루프린트에서 변수로 참조하고 함수를 호출하는 것이 가능합니다.\\n\\n### **2. 주요 서브클래스**\\n> **월드에 배치될 수 있는 모든 오브젝트의 기본 클래스입니다. 실무 팁: 변경 시 성능·안정성·호환성을 먼저 검토하세요.**\\n* **[[AActor]]**:\\n\\t월드에 배치될 수 있는 모든 오브젝트의 기본 클래스입니다.\\n* **[[UActorComponent]]**:\\n\\t[[AActor]]에 부착되어 기능을 추가하는 부품의 기본 클래스입니다.\\n* **[[UDataAsset]]**:\\n\\t게임플레이 데이터를 담기 위해 설계된 애셋의 기본 클래스입니다.\\n* **[[UGameInstance]]**:\\n\\t게임 세션 전체의 생명 주기를 관리하는 최상위 객체입니다.\\n\\n### **3. `UObject` vs. `struct`**\\n> **가비지 컬렉션, 리플렉션, 블루프린트 연동 등 언리얼 엔진의 핵심 기능이 필요한 경우에 사용합니다. 실무 팁: 변경 시 성능·안정성·호환성을 먼저 검토하세요.**\\n* **`UObject`를 사용하는 경우**:\\n\\t가비지 컬렉션, 리플렉션, 블루프린트 연동 등 언리얼 엔진의 핵심 기능이 필요한 경우에 사용합니다. 독립적인 '객체'로서의 생명 주기를 가집니다.\\n* **`struct` (`USTRUCT`)를 사용하는 경우**:\\n\\t단순한 데이터 묶음이 필요할 때 사용합니다. `USTRUCT()` 매크로를 사용하면 리플렉션 시스템의 일부 혜택(예: 블루프린트 노출, 직렬화)을 받을 수 있지만, 가비지 컬렉션의 대상이 되지는 않으며 독립적으로 존재할 수 없고 항상 다른 `UObject`나 `struct`의 멤버로 소유됩니다.\\n\\n### **4. 생성 방법**\\n> **가장 일반적인 `UObject` 생성 방법입니다. 실무 팁: 변경 시 성능·안정성·호환성을 먼저 검토하세요.**\\n* **`NewObject<T>(Outer)`**:\\n\\t가장 일반적인 `UObject` 생성 방법입니다. `Outer` 인자는 이 `UObject`를 소유할 다른 `UObject`를 지정하며, `Outer`가 파괴될 때 함께 파괴됩니다.\\n* **`CreateDefaultSubobject<T>(TEXT(\\\"...\\\"))`:\\n\\t클래스의 생성자(`Constructor`) 내에서 기본 서브오브젝트(주로 컴포넌트)를 생성할 때 사용합니다.\\n\\n### **5. 주의사항**:\\n\\t> **`UObject` 포인터 멤버 변수는 반드시 `UPROPERTY()` 매크로를 붙여야 합니다.**\\n* **`UPROPERTY()`**:\\n\\t`UObject` 포인터 멤버 변수는 반드시 `UPROPERTY()` 매크로를 붙여야 합니다. 그렇지 않으면 가비지 컬렉터가 해당 참조를 인지하지 못해, 아직 사용 중인 `UObject`를 파괴해버리는 심각한 문제를 일으킬 수 있습니다.\\n* **`new` 키워드 금지**:\\n\\t`UObject`는 `NewObject`나 `CreateDefaultSubobject`를 통해서만 생성해야 합니다.\\n\""],"names":["__vite_glob_1_136"],"mappings":"AAAA,MAAAA,EAAe"}