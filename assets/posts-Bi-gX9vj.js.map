{"version":3,"mappings":"mGAkBO,SAASA,EAAuBC,EAAiB,CACtD,GAAIA,GAAO,KAEX,OAAI,OAAOA,GAAQ,UAAY,YAAcA,EACnCA,EAAgC,QAEnCA,CACT,CCRA,MAAMC,EAAY,KAGT,CAAE,GAFQ,kBAEK,GADL,kFAAAC,EAAA,6EAAAC,KAAA,0DAAAD,EAAA,2DAAAC,KAAA,UACQ,GAG3B,IAAIC,EAA4B,KAEhC,SAASC,EAAoBC,EAAsB,CAIjD,OAHiBA,EAAK,MAAM,GAAG,EAAE,OAAS,IACpB,QAAQ,QAAS,EAAE,EAE7B,QAAQ,sBAAuB,EAAE,CAC/C,CAEA,SAASC,EAAwBC,EAAyC,CACxE,GAAI,CACF,MAAMC,EAAgB,GAChBC,MAAgB,IAEtB,SAAW,CAACJ,EAAMK,CAAU,IAAK,OAAO,QAAQH,CAAO,EACrD,GAAI,CACF,GAAI,OAAOG,GAAe,SAIxB,SAGF,MAAMC,EAAOP,EAAoBC,CAAI,EAErC,GAAII,EAAU,IAAIE,CAAI,EAIpB,SAEFF,EAAU,IAAIE,CAAI,EAGxB,KAAM,CAAE,KAAAC,EAAM,QAAAC,GAAYC,EAAiBJ,CAAU,EACzCK,EAAiB,CACrB,MAAOH,EAAK,OAASD,EACrB,KAAMC,EAAK,MAAQ,aACnB,QAASA,EAAK,QACd,OAAQA,EAAK,QAGfJ,EAAM,KAAK,CAAE,KAAAG,EAAM,KAAAI,EAAM,QAAAF,EAAS,CACpC,OAASG,EAAO,CACdC,EAAO,MAAM,0BAA2BZ,EAAMW,CAAK,CACrD,CAGF,OAAAR,EAAM,KAAK,CAACU,EAAGC,IAAM,CACnB,MAAMC,EAAQ,IAAI,KAAKF,EAAE,KAAK,IAAI,EAAE,UAEpC,OADc,IAAI,KAAKC,EAAE,KAAK,IAAI,EAAE,UACrBC,CACjB,CAAC,EAEMZ,CACT,OAASQ,EAAO,CACd,OAAAC,EAAO,MAAM,gCAAiCD,CAAK,EAC5C,EACT,CACF,CAEA,eAAeK,GAAgC,CAC7C,GAAIlB,EAAY,OAAOA,EAEvB,MAAMmB,EAAUtB,EAAA,EACVuB,EAAU,OAAO,QAAQD,CAAO,EAChCf,EAAiC,GACvC,aAAM,QAAQ,IAAIgB,EAAQ,IAAI,MAAO,CAAClB,EAAMmB,CAAM,IAAM,CACtD,GAAI,CACN,MAAMtB,EAAI,MAAMsB,EAAA,EACVC,EAAM3B,EAAmDI,CAAC,EAChEK,EAAQF,CAAI,EAAI,OAAOoB,GAAQ,SAAWA,EAAOA,GAAK,SAAW,EAC7D,OAASC,EAAG,CACZT,EAAO,MAAM,2BAA4BZ,EAAMqB,CAAC,CAClD,CACF,CAAC,CAAC,EAEFvB,EAAaG,EAAwBC,CAAO,EACrCJ,CACT,CASA,eAAsBwB,EAAmBhB,EAAyC,CAEhF,OADc,MAAMU,EAAA,GACP,KAAKO,GAAKA,EAAE,OAASjB,CAAI,CACxC","names":["unwrapModuleDefault","mod","postsGlob","__vitePreload","m","asyncCache","extractSlugFromPath","path","computePostsFromModules","modules","posts","seenSlugs","rawContent","slug","data","content","parseFrontmatter","meta","error","logger","a","b","dateA","loadAllPosts","loaders","entries","loader","val","e","getPostBySlugAsync","p"],"ignoreList":[],"sources":["../../src/lib/moduleUtils.ts","../../src/lib/posts.ts"],"sourcesContent":["/**\n * src/lib/moduleUtils.ts\n * 책임: 동적 import 결과에서 ESM/CJS default를 안전하게 해제하는 유틸\n * exports: unwrapModuleDefault\n */\n/**\n * src/lib/moduleUtils.ts\n * 책임: 동적 import 결과에서 ESM/CJS default 값을 안전하게 추출하는 유틸\n * 주요 exports: unwrapModuleDefault\n * 한글 설명: 모듈이 { default: value } 형태이거나 직접값인 경우 모두 처리합니다.\n */\n\n/**\n * Unwraps the default export from a dynamic import value for ESM/CJS interop.\n *\n * @param mod - Module value returned by dynamic import (ESM or CJS shape)\n * @returns The unwrapped default value as T, or the original module cast to T\n */\nexport function unwrapModuleDefault<T>(mod: unknown): T {\n  if (mod == null) return undefined as unknown as T\n  // Common case: ESM default export\n  if (typeof mod === 'object' && 'default' in (mod as Record<string, unknown>)) {\n    return (mod as Record<string, unknown>).default as unknown as T\n  }\n  return mod as T\n}\n\nexport default unwrapModuleDefault\n","/**\n * src/lib/posts.ts\n * 책임: 블로그 마크다운 포스트를 동적으로 로드하여 Post 객체 배열로 변환합니다.\n * 주요 exports: loadAllPosts, getPostBySlugAsync\n * 한글 설명: DEV/Prod에서 서로 다른 로드 전략을 사용합니다.\n */\n\nimport type { Post, PostMeta } from '../types'\nimport { parseFrontmatter } from './frontmatter'\nimport logger from './logger'\nimport unwrapModuleDefault from './moduleUtils'\n\n// Use dynamic import to avoid bundling all posts into the app's initial chunks.\n// `postsGlob` returns functions that when called import the raw markdown content as string.\n// Support multiple content locations:\n// - /content/posts/** (lowercase)\n// - /content/Postings/** (user-renamed folder, case variants)\nconst postsGlob = () => {\n  const absLower = import.meta.glob('/content/posts/**/*.md', { query: '?raw', import: 'default' }) as Record<string, () => Promise<string>>\n  const absUpper = import.meta.glob('/content/Postings/**/*.md', { query: '?raw', import: 'default' }) as Record<string, () => Promise<string>>\n  return { ...absLower, ...absUpper }\n}\n\nlet asyncCache: Post[] | null = null\n\nfunction extractSlugFromPath(path: string): string {\n  const fileName = path.split('/').pop() || ''\n  const base = fileName.replace(/\\.md$/, '')\n  // Remove date prefix (YYYY-MM-DD-) if present\n  return base.replace(/^\\d{4}-\\d{2}-\\d{2}-/, '')\n}\n\nfunction computePostsFromModules(modules: Record<string, string>): Post[] {\n  try {\n    const posts: Post[] = []\n    const seenSlugs = new Set<string>()\n\n    for (const [path, rawContent] of Object.entries(modules)) {\n      try {\n        if (typeof rawContent !== 'string') {\n          if (import.meta.env.DEV) {\n            logger.warn('[posts] unexpected content type for', path, typeof rawContent)\n          }\n          continue\n        }\n\n        const slug = extractSlugFromPath(path)\n\n        if (seenSlugs.has(slug)) {\n          if (import.meta.env.DEV) {\n            logger.warn('[posts] duplicate slug detected:', slug, 'from', path)\n          }\n          continue\n        }\n        seenSlugs.add(slug)\n\n  // 왜: frontmatter에서 title/date를 추출하여 PostMeta를 구성. 렌더링/정렬에 사용됨\n  const { data, content } = parseFrontmatter(rawContent)\n        const meta: PostMeta = {\n          title: data.title || slug,\n          date: data.date || '1970-01-01',\n          excerpt: data.excerpt,\n          author: data.author,\n        }\n\n        posts.push({ slug, meta, content })\n      } catch (error) {\n        logger.error('[posts] failed to parse', path, error)\n      }\n    }\n\n    posts.sort((a, b) => {\n      const dateA = new Date(a.meta.date).getTime()\n      const dateB = new Date(b.meta.date).getTime()\n      return dateB - dateA\n    })\n\n    return posts\n  } catch (error) {\n    logger.error('[posts] Failed to load posts:', error)\n    return []\n  }\n}\n\nasync function loadAllPosts(): Promise<Post[]> {\n  if (asyncCache) return asyncCache\n\n  const loaders = postsGlob()\n  const entries = Object.entries(loaders)\n  const modules: Record<string,string> = {}\n  await Promise.all(entries.map(async ([path, loader]) => {\n    try {\n  const m = await loader()\n  const val = unwrapModuleDefault<string | { default?: string }>(m)\n  modules[path] = typeof val === 'string' ? val : (val?.default ?? '')\n      } catch (e) {\n      logger.error('[posts] failed to import', path, e)\n    }\n  }))\n\n  asyncCache = computePostsFromModules(modules)\n  return asyncCache\n}\n\nexport { loadAllPosts }\n\n/**\n * getPostBySlugAsync\n * @param slug 포스트의 slug\n * @returns Promise<Post | undefined> - 비동기 방식으로 포스트를 로드합니다.\n */\nexport async function getPostBySlugAsync(slug: string): Promise<Post | undefined> {\n  const posts = await loadAllPosts()\n  return posts.find(p => p.slug === slug)\n}\n\n// Debug helper: which md files were matched\n// (internal) debug helper was removed in production\n"],"file":"assets/posts-Bi-gX9vj.js"}