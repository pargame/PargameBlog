{"version":3,"mappings":"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","names":["listSubCollections","parent","relModules","absModules","__vitePreload","m","entries","marker","set","p","idx","first","a","b","CollectionCard","name","onOpen","handleCardClick","jsxs","e","jsx","GraphModal","lazy","n","InsightDrawer","GraphPage","collections","useMemo","opened","setOpened","useState","insightId","setInsightId","insightIdRef","useRef","location","useLocation","navigate","useNavigate","useEffect","toOpen","parts","leaf","full","params","search","handleCloseModal","useCallback","handleCloseInsight","handleNodeClick","node","handleWikiLinkClick","target","handleGraphBackgroundClick","v","Suspense"],"ignoreList":[],"sources":["../../src/lib/content.ts","../../src/components/CollectionCard.tsx","../../src/pages/GraphPage.tsx"],"sourcesContent":["/**\n * src/lib/content.ts\n * 책임: 콘텐츠 컬렉션의 경로/인덱스 관련 유틸리티\n * 주요 exports: listContentCollections, listSubCollections\n * 한글 설명: 파일 내용을 eager-import 하지 않고 경로 기반으로 컬렉션 정보를 수집합니다.\n */\n\n/**\n * listContentCollections\n * - 반환: content 폴더 하위의 최상위 컬렉션명 배열\n */\n/**\n * listContentCollections\n * @returns string[] - content 폴더 하위의 최상위 컬렉션명 배열\n */\nexport function listContentCollections(): string[] {\n  // Only read file paths (do NOT eager-load file contents) to avoid bundling all markdown\n  const relModules = import.meta.glob('../content/**/*.md', { query: '?raw', import: 'default' }) as Record<string, unknown>\n  const absModules = import.meta.glob('/content/**/*.md', { query: '?raw', import: 'default' }) as Record<string, unknown>\n  const entries = [...Object.keys(relModules), ...Object.keys(absModules)]\n  const set = new Set<string>()\n  for (const p of entries) {\n    // Normalize path like '/src/content/<collection>/.../file.md' or '../content/<collection>/...'\n    const idx = p.indexOf('/content/')\n    if (idx === -1) continue\n    const after = p.slice(idx + '/content/'.length)\n    const top = after.split('/')[0]\n    if (top) set.add(top)\n  }\n  return Array.from(set).sort((a, b) => a.localeCompare(b))\n}\n\n/**\n * listSubCollections\n * - parent: sub-root under /content (e.g., 'GraphArchives')\n * - returns immediate child folder names under /content/{parent}\n *\n * Note: Works with nested paths and doesn't import file contents.\n */\n/**\n * listSubCollections\n * - parent: content 하위의 상위 폴더명(예: 'GraphArchives')\n * - returns: immediate child folder names under /content/{parent}\n */\n/**\n * listSubCollections\n * @param parent content 하위의 상위 폴더명 (예: 'GraphArchives')\n * @returns string[] - immediate child folder names under /content/{parent}\n */\nexport function listSubCollections(parent: string): string[] {\n  const relModules = import.meta.glob('../content/**/*.md', { query: '?raw', import: 'default' }) as Record<string, unknown>\n  const absModules = import.meta.glob('/content/**/*.md', { query: '?raw', import: 'default' }) as Record<string, unknown>\n  const entries = [...Object.keys(relModules), ...Object.keys(absModules)]\n  const marker = `/content/${parent}/`\n  const set = new Set<string>()\n  for (const p of entries) {\n    const idx = p.indexOf(marker)\n    if (idx === -1) continue\n    const after = p.slice(idx + marker.length)\n    const first = after.split('/')[0]\n    if (first) set.add(first)\n  }\n  return Array.from(set).sort((a, b) => a.localeCompare(b))\n}\n","/**\n * src/components/CollectionCard.tsx\n * 책임: 컬렉션 카드 렌더링 (이름과 오픈 핸들러)\n * 주요 export: default CollectionCard (React.FC<Props>)\n * 한글 설명: 컬렉션 이름을 클릭하면 그래프 모달을 엽니다.\n */\n\nimport React from 'react'\n\ninterface Props {\n  name: string\n  onOpen: (name: string) => void\n}\n\nconst CollectionCard: React.FC<Props> = ({ name, onOpen }) => {\n  const handleCardClick = () => onOpen(name)\n  return (\n    <div className=\"post-preview\" onClick={handleCardClick} role=\"button\" tabIndex={0} onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); handleCardClick() } }}>\n      <h3>\n        <a\n          href=\"#\"\n          onClick={(e) => { e.preventDefault(); e.stopPropagation(); onOpen(name) }}\n          data-discover=\"true\"\n          className=\"collection-link\"\n        >\n          {name}\n        </a>\n      </h3>\n      <p>이 아카이브의 문서들을 그래프로 시각화합니다.</p>\n      <small>클릭하면 아카이브 그래프와 검색창이 열립니다.</small>\n    </div>\n  )\n}\n\nexport default CollectionCard\n","/**\n * src/pages/GraphPage.tsx\n * 책임: Graph 컬렉션 선택 및 모달 제어를 담당하는 페이지 컴포넌트\n * 주요 export: default GraphPage (React.FC)\n * 한글 설명: URL 쿼리 `?open=` 을 기준으로 모달을 자동 오픈합니다.\n */\n\nimport React, { Suspense, lazy, useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { listSubCollections } from '../lib/content'\n// GraphModal is heavy (GraphView + d3). Lazy-load it so initial bundle stays small.\nconst GraphModal = lazy(() => import('../components/graph/GraphModal'))\n// InsightDrawer uses react-markdown and remark-gfm; lazy-load to avoid bundling them in GraphPage\nconst InsightDrawer = lazy(() => import('../components/InsightDrawer'))\nimport CollectionCard from '../components/CollectionCard'\n\nconst GraphPage: React.FC = () => {\n  // State\n  // We want sub-collections under content/GraphArchives (e.g., Algorithm, UnrealEngine)\n  const collections = useMemo(() => listSubCollections('GraphArchives'), [])\n  const [opened, setOpened] = useState<string | null>(null)\n  const [insightId, setInsightId] = useState<string | null>(null)\n  const insightIdRef = useRef<string | null>(null)\n  const location = useLocation()\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    insightIdRef.current = insightId\n  }, [insightId])\n  \n  // Auto-open when ?open=<collection>\n  // Note: intentionally omit `opened` from deps to avoid a race where\n  // clearing `opened` (on modal close) would cause this effect to run\n  // while the URL still contains the param, immediately re-opening the\n  // modal. We only want to respond to URL changes and collection list\n  // updates here.\n  useEffect(() => {\n    const params = new URLSearchParams(location.search)\n    const toOpen = params.get('open')\n    // Accept forms like 'GraphArchives/Algorithm' and validate the leaf is a known collection\n    if (toOpen) {\n      const parts = toOpen.split('/').filter(Boolean)\n      const leaf = parts[parts.length - 1]\n      if (leaf && collections.includes(leaf)) {\n        const full = parts.length > 1 ? toOpen : `GraphArchives/${leaf}`\n        if (opened !== full) setOpened(full)\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.search, collections])\n\n  // Keep the URL `?open=` param in sync with local `opened` state. This\n  // centralizes navigation and avoids races where we set state and then\n  // imperatively navigate which could cause duplicate open calls.\n  useEffect(() => {\n    const params = new URLSearchParams(location.search)\n    if (opened) params.set('open', opened)\n    else params.delete('open')\n    const search = params.toString() ? `?${params.toString()}` : ''\n    // Replace history entry rather than push to avoid cluttering history.\n    navigate({ pathname: location.pathname, search }, { replace: true })\n    try {\n      // inform global simulation controller about modal visibility so the\n      // simulation can be paused when the modal is closed and resumed when opened.\n      if (typeof window !== 'undefined' && window.dispatchEvent) {\n        if (opened) window.dispatchEvent(new Event('pargame:resumeSimulation'))\n        else window.dispatchEvent(new Event('pargame:pauseSimulation'))\n      }\n    } catch {\n      // no-op: dispatch failure shouldn't block navigation\n    }\n  }, [opened, location.pathname, location.search, navigate])\n\n  // Pause simulation when this page unmounts (navigation away). This ensures\n  // the simulation isn't left running when the user navigates to another route.\n  useEffect(() => {\n    return () => {\n      try {\n        if (typeof window !== 'undefined' && window.dispatchEvent) window.dispatchEvent(new Event('pargame:pauseSimulation'))\n      } catch {\n        // ignore\n      }\n    }\n  }, [])\n  \n  // Ref for latest insightId value (to avoid closure issues)\n  // Event handlers\n  const handleCloseModal = useCallback(() => {\n    // Only update local state; URL will be synced by the effect watching\n    // `opened`.\n    setOpened(null)\n    setInsightId(null)\n  }, [])\n\n  const handleCloseInsight = useCallback(() => {\n    setInsightId(null)\n  }, [])\n\n  const handleNodeClick = useCallback((node: { id: string; title: string; missing?: boolean }) => {\n    if (node.missing) return\n    setInsightId(node.id)\n  }, [])\n\n  const handleWikiLinkClick = useCallback((target: string) => {\n    setInsightId(target)\n  }, [])\n\n  const handleGraphBackgroundClick = useCallback(() => {\n    // Read latest insightId from ref to avoid stale-closure issues inside D3 handlers\n    if (insightIdRef.current) {\n      handleCloseInsight()\n    }\n  }, [handleCloseInsight])\n\n  return (\n    <div className=\"page\">\n      <div className=\"hero-section\">\n        <h1 className=\"hero-title\">Graph</h1>\n        <p className=\"hero-subtitle\">그래프와 검색창으로 쉽게 학습하세요!</p>\n      </div>\n\n      <div className=\"content-section\">\n        <h2>GraphArchives</h2>\n        {collections.length === 0 ? (\n          <p>아직 하위 아카이브가 없습니다. <em>content/GraphArchives/&lt;Algorithm|UnrealEngine&gt;</em>에 마크다운을 추가해 보세요.</p>\n        ) : (\n          collections.map(name => (\n            <CollectionCard key={name} name={name} onOpen={(v) => setOpened(`GraphArchives/${v}`)} />\n          ))\n        )}\n      </div>\n\n      {opened && (\n        <div className=\"modal-backdrop\" onClick={handleCloseModal}>\n          <Suspense fallback={<div className=\"suspense-fallback-hero\">로딩 중…</div>}>\n            <GraphModal \n              key={opened}\n              collection={opened}\n              onClose={handleCloseModal}\n              onNodeClick={handleNodeClick}\n              onGraphBackgroundClick={handleGraphBackgroundClick}\n              focusNodeId={insightId}\n            />\n          </Suspense>\n          <Suspense fallback={<div className=\"suspense-fallback-small\">패널 준비중…</div>}>\n            <InsightDrawer\n              collection={opened}\n              insightId={insightId}\n              onWikiLinkClick={handleWikiLinkClick}\n            />\n          </Suspense>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default GraphPage\n"],"file":"assets/graph-page-DcVxlwUW.js"}