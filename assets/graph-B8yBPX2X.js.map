{"version":3,"mappings":"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","names":["extractWikiLinks","src","out","re","m","raw","pipeIndex","targetPart","hashIndex","target","buildIdTitleMap","modules","idToTitle","fileById","path","content","id","title","v","buildGraphForCollectionAsync","collection","allLoaders","__vitePreload","relPrefix","absPrefix","entries","p","loader","nodesMap","linksSet","srcId","body","targets","t","targetId","nodes","links","k","s"],"ignoreList":[],"sources":["../../src/lib/graphParser.ts","../../src/lib/graph.ts"],"sourcesContent":["/**\n * src/lib/graphParser.ts\n * 책임: 마크다운에서 위키 스타일 링크를 추출하고 id->title 맵을 생성합니다.\n * 주요 exports: extractWikiLinks, buildIdTitleMap\n * 한글 설명: Anchor/Label은 무시하며, frontmatter의 title을 우선 사용합니다.\n */\n\n/**\n * extractWikiLinks\n * @param src 문서 본문(마크다운 원문)\n * @returns 추출된 Target id 문자열 배열\n * 설명: [[Target]], [[Target|Label]], [[Target#Anchor]] 형태에서 Target id만 추출합니다.\n */\nexport function extractWikiLinks(src: string): string[] {\n  const out: string[] = []\n  const re = /\\[\\[([^\\]]+)\\]\\]/g\n  let m: RegExpExecArray | null\n  while ((m = re.exec(src))) {\n    const raw = m[1].trim()\n    if (!raw) continue\n    const pipeIndex = raw.indexOf('|')\n    const targetPart = pipeIndex >= 0 ? raw.slice(0, pipeIndex) : raw\n    const hashIndex = targetPart.indexOf('#')\n    const target = (hashIndex >= 0 ? targetPart.slice(0, hashIndex) : targetPart).trim()\n    if (target) out.push(target)\n  }\n  return out\n}\n\n/**\n * buildIdTitleMap\n * @param modules 파일경로->마크다운원문 맵\n * @returns { idToTitle: Map<string,string>, fileById: Map<string,string> }\n * 설명: 각 마크다운 파일의 id(파일명)에서 title(frontmatter 우선)을 추출해 맵을 구성합니다.\n */\nexport function buildIdTitleMap(modules: Record<string, string>) {\n  const idToTitle = new Map<string, string>()\n  const fileById = new Map<string, string>()\n\n  for (const [path, content] of Object.entries(modules)) {\n    const raw = typeof content === 'string' ? content : ''\n    const file = path.split('/').pop() || ''\n    const id = file.replace(/\\.md$/, '')\n    fileById.set(id, path)\n\n    const m = raw.match(/^---[\\s\\S]*?\\n\\s*title:\\s*(.+?)\\n[\\s\\S]*?---/)\n    let title = id\n    if (m) {\n      let v = m[1].trim()\n      if ((v.startsWith('\"') && v.endsWith('\"')) || (v.startsWith(\"'\") && v.endsWith(\"'\"))) {\n        v = v.slice(1, -1)\n      }\n      title = v || id\n    }\n    idToTitle.set(id, title)\n  }\n\n  return { idToTitle, fileById }\n}\n","/**\n * src/lib/graph.ts\n * 책임: 마크다운 콘텐츠로부터 GraphData(nodes, links)를 생성하는 비동기 빌더\n * exports: buildGraphForCollectionAsync(collection) => Promise<GraphData>\n */\n\nimport type { GraphData, GraphNode } from '../types'\nimport { buildIdTitleMap, extractWikiLinks } from './graphParser'\n\nexport async function buildGraphForCollectionAsync(collection: string): Promise<GraphData> {\n  const relLoaders = import.meta.glob('../content/**/*.md', { query: '?raw', import: 'default' }) as Record<string, () => Promise<string | { default: string }>>\n  const absLoaders = import.meta.glob('/content/**/*.md', { query: '?raw', import: 'default' }) as Record<string, () => Promise<string | { default: string }>>\n  const allLoaders = { ...relLoaders, ...absLoaders }\n\n  const relPrefix = `../content/${collection}/`\n  const absPrefix = `/content/${collection}/`\n  const entries = Object.entries(allLoaders).filter(([p]) => p.includes(relPrefix) || p.includes(absPrefix))\n\n  const modules: Record<string, string> = {}\n  await Promise.all(entries.map(async ([path, loader]) => {\n    try {\n      const m = await loader() as string | { default?: string }\n      const raw = typeof m === 'string' ? m : m?.default ?? ''\n      modules[path] = raw\n    } catch {\n      // ignore individual import failures\n    }\n  }))\n\n  const { idToTitle } = buildIdTitleMap(modules)\n\n  const nodesMap = new Map<string, GraphNode>()\n  const linksSet = new Set<string>()\n\n  for (const id of idToTitle.keys()) {\n    nodesMap.set(id, { id, title: idToTitle.get(id) || id })\n  }\n\n  for (const [path, content] of Object.entries(modules)) {\n    const raw = typeof content === 'string' ? content : ''\n    const file = path.split('/').pop() || ''\n    const srcId = file.replace(/\\.md$/, '')\n    const body = raw.replace(/^---[\\s\\S]*?---/, '')\n    const targets = extractWikiLinks(body)\n\n    for (const t of targets) {\n      const targetId = t\n      if (!nodesMap.has(targetId)) {\n        nodesMap.set(targetId, { id: targetId, title: targetId, missing: true })\n      }\n      linksSet.add(`${srcId}-->${targetId}`)\n    }\n  }\n\n  const nodes = Array.from(nodesMap.values())\n  const links = Array.from(linksSet).map(k => {\n    const [s, t] = k.split('-->')\n    return { source: s, target: t }\n  })\n\n  return { nodes, links }\n}\n\n"],"file":"assets/graph-B8yBPX2X.js"}