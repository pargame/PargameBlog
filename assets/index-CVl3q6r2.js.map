{"version":3,"mappings":";o4BASA,SAASA,GAAS,CAChB,KAAM,CAACC,EAAOC,CAAQ,EAAIC,WAAS,EAAE,EAErCC,mBAAU,IAAM,CAIdF,EAAS,sBAAmB,CAC9B,EAAG,EAAE,QAGF,UAAO,UAAU,cAChB,SAAAG,OAAC,OAAI,UAAU,mBACb,UAAAA,OAAC,OAAI,UAAU,cAAc,uBAE3BC,MAAC,KACC,UAAU,cACV,KAAK,6BACL,OAAO,SACP,IAAI,sBACJ,aAAW,oBAEX,SAAAA,MAAC,OAAI,QAAQ,YAAY,KAAK,eAAe,MAAM,6BAA6B,cAAY,OAC1F,SAAAA,MAAC,QAAK,EAAE,6jBAA4jB,EACtkB,GACF,EACF,EACAD,OAAC,OAAI,UAAU,cAAc,+BAAa,KAAE,KAAM,UAAUJ,CAAK,GAAK,YAAS,eAAe,GAAI,EAClGK,MAAC,OAAI,UAAU,cAAc,mCAAuB,GACtD,EACF,CAEJ,CAEA,MAAAC,EAAeC,OAAKR,CAAM,ECjCpBS,EAAWC,OAAK,IAAAC,EAAA,IAAM,OAAO,wBAAkB,iCAAC,EAChDC,EAAYF,OAAK,IAAAC,EAAA,IAAM,OAAO,yBAAmB,6BAAC,EAClDE,EAAYH,OAAK,IAAAC,EAAA,IAAM,OAAO,0BAAmB,iCAAC,EAClDG,EAAWJ,OAAK,IAAAC,EAAA,IAAM,OAAO,wBAAkB,sCAAC,EAGtD,SAASI,GAAM,CAEb,MAAMC,EAAU,gBAChB,IAAIC,EAAWD,EAGf,OAAWA,EAAQ,SAAS,GAAG,IAC7BC,EAAWD,EAAQ,MAAM,EAAG,EAAE,SAU7BE,EAAA,CAAO,SAAAD,EACN,gBAAC,OAAI,UAAU,MACb,UAAAX,MAAC,OAAI,UAAU,SACb,SAAAD,OAAC,OAAI,UAAU,gBACb,UAAAC,MAACa,EAAA,CAAK,GAAG,IAAI,UAAU,WAAW,wBAElC,EACAd,OAAC,MAAG,UAAU,WACZ,gBAAC,MAAG,UAAU,WACZ,SAAAC,MAACa,EAAA,CAAK,GAAG,SAAS,UAAU,WAAW,iBAEvC,EACF,QACC,MAAG,UAAU,WACZ,SAAAb,MAACa,EAAA,CAAK,GAAG,SAAS,UAAU,WAAW,iBAEvC,EACF,GACF,GACF,EACF,QAEC,QAAK,UAAU,eACd,SAAAb,MAACc,YAAS,SAAUd,MAAC,OAAI,UAAU,OAAO,SAAAA,MAAC,KAAE,sBAAU,EAAI,EAC3D,gBAACe,EAAA,CACC,UAAAf,MAACgB,GAAM,KAAK,IAAI,QAAShB,MAACG,IAAS,EAAI,QACtCa,EAAA,CAAM,KAAK,SAAS,QAAShB,MAACM,IAAU,EAAI,QAC5CU,EAAA,CAAM,KAAK,SAAS,QAAShB,MAACO,IAAU,EAAI,QAC5CS,EAAA,CAAM,KAAK,eAAe,QAAShB,MAACQ,IAAS,EAAI,EAEjD,GAGDR,MAACgB,GAAM,KAAK,IAAI,QAASjB,OAAC,OAAI,UAAU,OAAO,UAAAC,MAAC,KAAE,2BAAe,QAAKa,EAAA,CAAK,GAAG,IAAI,eAAG,GAAO,EAAQ,GACtG,EACA,EACF,QACLnB,EAAA,EAAO,GACJ,EACF,CAEJ,CC9DAuB,aAAW,SAAS,eAAe,MAAM,CAAE,EAAE,OAC3CjB,MAACkB,aAAA,CACC,SAAAlB,MAACS,EAAA,EAAI,EACP,CACF","names":["Footer","email","setEmail","useState","useEffect","jsxs","jsx","Footer$1","memo","HomePage","lazy","__vitePreload","AboutPage","GraphPage","PostPage","App","baseUrl","basename","Router","Link","Suspense","Routes","Route","createRoot","StrictMode"],"ignoreList":[],"sources":["../../src/components/Footer.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * src/components/Footer.tsx\n * 책임: 사이트 푸터 렌더링 (연락처 및 링크)\n * 주요 export: default memo(Footer) (React.FC)\n * 한글 설명: 이메일을 런타임에 조합하여 크롤링을 방지합니다.\n */\n\nimport { memo, useEffect, useState } from 'react'\n\nfunction Footer() {\n  const [email, setEmail] = useState('')\n\n  useEffect(() => {\n    // 크롤링 방지: 이메일을 런타임에 조합\n    const user = '001201parg'\n    const domain = 'gmail.com'\n    setEmail(`${user}@${domain}`)\n  }, [])\n\n  return (\n    <footer className=\"site-footer\">\n      <div className=\"footer-container\">\n        <div className=\"footer-item\">\n          © Pargame&nbsp;\n          <a\n            className=\"github-link\"\n            href=\"https://github.com/pargame\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            aria-label=\"Pargame on GitHub\"\n          >\n            <svg viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\">\n              <path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.01.08-2.12 0 0 .67-.21 2.2.82a7.6 7.6 0 0 1 2-.27c.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.11.16 1.92.08 2.12.51.56.82 1.28.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"/>\n            </svg>\n          </a>\n        </div>\n        <div className=\"footer-item\">Contact Me! <a href={`mailto:${email}`}>{email || '(loading...)'}</a></div>\n        <div className=\"footer-item\">Built with Vite + React</div>\n      </div>\n    </footer>\n  )\n}\n\nexport default memo(Footer)\n","/**\n * src/App.tsx\n * 책임: 라우터 및 전역 레이아웃(네비게이션, Footer)을 정의하는 루트 컴포넌트\n * 주요 export: default App (React.FC)\n * 한글 설명: Vite BASE_URL에 따라 Router basename을 동적으로 계산합니다.\n */\n\nimport { Suspense, lazy } from 'react'\nimport { Link, Navigate, Route, BrowserRouter as Router, Routes } from 'react-router-dom'\nimport Footer from './components/Footer'\nconst HomePage = lazy(() => import('./pages/HomePage'))\nconst AboutPage = lazy(() => import('./pages/AboutPage'))\nconst GraphPage = lazy(() => import('./pages/GraphPage'))\nconst PostPage = lazy(() => import('./pages/PostPage'))\nimport './App.css'\n\nfunction App() {\n  // Vite의 BASE_URL과 동기화 (dev: '/', build: '/PargameBlog/')\n  const baseUrl = import.meta.env.BASE_URL || '/'\n  let basename = baseUrl\n  if (baseUrl === './') {\n    basename = ''\n  } else if (baseUrl.endsWith('/')) {\n    basename = baseUrl.slice(0, -1)\n  }\n  // Dev에서 실수로 /PargameBlog 경로로 접속했을 때도 동작하도록 보정\n  if (import.meta.env.DEV && typeof window !== 'undefined') {\n    if (window.location.pathname.startsWith('/PargameBlog')) {\n      basename = '/PargameBlog'\n    }\n  }\n  \n  return (\n    <Router basename={basename}>\n      <div className=\"app\">\n        <nav className=\"navbar\">\n          <div className=\"nav-container\">\n            <Link to=\"/\" className=\"nav-logo\">\n              Pargame Blog\n            </Link>\n            <ul className=\"nav-menu\">\n              <li className=\"nav-item\">\n                <Link to=\"/about\" className=\"nav-link\">\n                  About\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link to=\"/graph\" className=\"nav-link\">\n                  Graph\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        \n        <main className=\"main-content\">\n          <Suspense fallback={<div className=\"page\"><p>Loading...</p></div>}>\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/about\" element={<AboutPage />} />\n            <Route path=\"/graph\" element={<GraphPage />} />\n            <Route path=\"/posts/:slug\" element={<PostPage />} />\n            {/* dev에서 /PargameBlog/* 로 접근한 경우 홈으로 리다이렉트 */}\n            {import.meta.env.DEV && (\n              <Route path=\"/PargameBlog/*\" element={<Navigate to={window.location.pathname.replace(/^\\/PargameBlog/, '') || '/'} replace />} />\n            )}\n            <Route path=\"*\" element={<div className=\"page\"><p>페이지를 찾을 수 없습니다.</p><Link to=\"/\">홈으로</Link></div>} />\n          </Routes>\n          </Suspense>\n        </main>\n  <Footer />\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","/**\n * src/main.tsx\n * 책임: 앱 루트 진입점 (React 렌더링 초기화)\n * 주요 역할: React.StrictMode로 App을 마운트\n * 한글 설명: Vite 환경 변수에 따라 basename을 처리하지 않습니다(앱 레벨에서 처리).\n */\n\nimport { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App'\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n)\n"],"file":"assets/index-CVl3q6r2.js"}