{"version":3,"file":"frontmatter-DaTC158P.js","sources":["../../src/lib/frontmatter.ts"],"sourcesContent":["/**\n * src/lib/frontmatter.ts\n * 책임: 마크다운 파일의 YAML frontmatter를 파싱/제거하는 유틸을 제공.\n * 주요 exports: parseFrontmatter(src) -> { data, content }, stripFrontmatter(src) -> string\n * 사용법 요약: title/date 등 단일 라인 key:value 페어를 간단히 추출합니다.\n * 한글 설명: 복잡한 YAML(중첩 구조)은 지원하지 않으며, 브라우저 환경에서 안전하게 동작하도록 설계되었습니다.\n */\n\n// Shared frontmatter utilities for Markdown files\n\nexport type Frontmatter = Record<string, string>\n\n/**\n * parseFrontmatter\n * @param src 전체 마크다운 텍스트\n * @returns { data, content } - data: 단순한 key:value 맵, content: frontmatter가 제거된 본문\n * 설명: 간단한 single-line frontmatter 파싱을 수행합니다. 중첩/배열 등 고급 YAML은 처리하지 않습니다.\n */\n/**\n * parseFrontmatter\n * @param src 마크다운 원문\n * @returns { data, content } - data: key:value 맵, content: frontmatter 제거된 본문\n */\nexport function parseFrontmatter(src: string): { data: Frontmatter; content: string } {\n  const result = { data: {} as Frontmatter, content: src }\n  const fm = src.match(/^---\\s*[\\r\\n]+([\\s\\S]*?)^[ \\t]*---\\s*[\\r\\n]+/m)\n  if (!fm) return result\n  const yaml = fm[1] || ''\n  const data: Frontmatter = {}\n  for (const line of yaml.split(/\\r?\\n/)) {\n    const t = line.trim()\n    // 왜: 주석(#) 라인이나 빈 라인은 무시하여 실수로 주석이 섞여도 안전하게 동작\n    if (!t || t.startsWith('#')) continue\n    const i = t.indexOf(':')\n    if (i === -1) continue\n    const key = t.slice(0, i).trim()\n    let value = t.slice(i + 1).trim()\n    // 왜: 값이 인용부호로 감싸여 있으면 제거하여 일관된 값 사용\n    if ((value.startsWith('\"') && value.endsWith('\"')) || (value.startsWith(\"'\") && value.endsWith(\"'\"))) {\n      value = value.slice(1, -1)\n    }\n    data[key] = value\n  }\n  result.data = data\n  result.content = src.slice(fm[0].length)\n  return result\n}\n\n/**\n * stripFrontmatter\n * @param src 전체 마크다운 텍스트\n * @returns 본문만 포함된 문자열(frontmatter 제거)\n */\n/**\n * stripFrontmatter\n * @param src 마크다운 원문\n * @returns frontmatter가 제거된 본문 문자열\n */\nexport function stripFrontmatter(src: string): string {\n  const leading = src.match(/^[\\ufeff\\s]*/)\n  const offset = leading ? leading[0].length : 0\n  const rest = src.slice(offset)\n  const m = rest.match(/^---\\s*[\\r\\n]+[\\s\\S]*?^[ \\t]*---\\s*[\\r\\n]+/m)\n  // 왜: frontmatter가 없으면 원문을 그대로 반환하여 호출부가 안전하게 본문을 사용 가능\n  return m ? rest.slice(m[0].length) : src\n}\n"],"names":["parseFrontmatter","src","result","fm","yaml","data","line","t","i","key","value"],"mappings":"AAuBO,SAASA,EAAiBC,EAAqD,CACpF,MAAMC,EAAS,CAAE,KAAM,CAAA,EAAmB,QAASD,CAAA,EAC7CE,EAAKF,EAAI,MAAM,+CAA+C,EACpE,GAAI,CAACE,EAAI,OAAOD,EAChB,MAAME,EAAOD,EAAG,CAAC,GAAK,GAChBE,EAAoB,CAAA,EAC1B,UAAWC,KAAQF,EAAK,MAAM,OAAO,EAAG,CACtC,MAAMG,EAAID,EAAK,KAAA,EAEf,GAAI,CAACC,GAAKA,EAAE,WAAW,GAAG,EAAG,SAC7B,MAAMC,EAAID,EAAE,QAAQ,GAAG,EACvB,GAAIC,IAAM,GAAI,SACd,MAAMC,EAAMF,EAAE,MAAM,EAAGC,CAAC,EAAE,KAAA,EAC1B,IAAIE,EAAQH,EAAE,MAAMC,EAAI,CAAC,EAAE,KAAA,GAEtBE,EAAM,WAAW,GAAG,GAAKA,EAAM,SAAS,GAAG,GAAOA,EAAM,WAAW,GAAG,GAAKA,EAAM,SAAS,GAAG,KAChGA,EAAQA,EAAM,MAAM,EAAG,EAAE,GAE3BL,EAAKI,CAAG,EAAIC,CACd,CACA,OAAAR,EAAO,KAAOG,EACdH,EAAO,QAAUD,EAAI,MAAME,EAAG,CAAC,EAAE,MAAM,EAChCD,CACT"}