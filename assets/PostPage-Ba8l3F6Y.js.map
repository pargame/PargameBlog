{"version":3,"mappings":"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","names":["markdownToHtml","markdown","file","unified","remarkParse","remarkRehype","rehypeSanitize","rehypeStringify","createSafeWrapper","candidate","originalFn","args","processorLike","tree","e","logger","PostPage","slug","useParams","post","setPost","useState","remarkGfm","setRemarkGfm","html","setHtml","useEffect","mounted","mod","n","unwrapModuleDefault","wrapped","p","getPostBySlugAsync","out","jsxs","jsx","ReactMarkdown","Link"],"ignoreList":[],"sources":["../../src/lib/markdownToHtml.ts","../../src/pages/PostPage.tsx"],"sourcesContent":["/**\n * src/lib/markdownToHtml.ts\n * 책임: 마크다운을 안전한 HTML로 변환하는 헬퍼\n * 주요 exports: markdownToHtml\n * 한글 설명: rehype-sanitize를 통해 XSS 위험을 완화합니다.\n */\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeSanitize from 'rehype-sanitize'\nimport rehypeStringify from 'rehype-stringify'\n\n/**\n * markdownToHtml\n * @param markdown 마크다운 원문\n * @returns Promise<string> 안전하게 변환된 HTML 문자열\n * 설명: remark->rehype 파이프라인을 사용하며, 최종적으로 rehype-sanitize로 필터링합니다.\n */\n/**\n * markdownToHtml\n * @param markdown 마크다운 원문\n * @returns Promise<string> - 변환된 HTML 문자열\n */\nexport async function markdownToHtml(markdown: string): Promise<string> {\n  const file = await unified()\n    .use(remarkParse)\n    .use(remarkRehype)\n    .use(rehypeSanitize)\n    .use(rehypeStringify)\n    .process(markdown)\n  // 왜: unified의 결과를 문자열로 변환하여 컴포넌트가 innerHTML로 안전히 사용할 수 있도록 한다.\n  return String(file)\n}\n\nexport default markdownToHtml\n","/**\n * src/pages/PostPage.tsx\n * 책임: 개별 포스트 로딩 및 렌더링\n * 주요 export: default PostPage (React.FC)\n * 한글 설명: remark-gfm는 런타임에 안전하게 lazy 로드합니다.\n */\n\nimport React, { useEffect, useState } from 'react'\nimport type { Post } from '../types'\nimport logger from '../lib/logger'\nimport unwrapModuleDefault from '../lib/moduleUtils'\nimport { Link, useParams } from 'react-router-dom'\nimport ReactMarkdown from 'react-markdown'\nimport { getPostBySlugAsync } from '../lib/posts'\nimport markdownToHtml from '../lib/markdownToHtml'\n\ntype MarkdownPlugin = unknown\n\nfunction createSafeWrapper(candidate: unknown): MarkdownPlugin | null {\n  if (typeof candidate !== 'function') return null\n  const originalFn = candidate as (...a: unknown[]) => unknown\n  return function safeAttacher(this: unknown, ...args: unknown[]) {\n    // If `this` is not a unified Processor (no `data`), skip attaching the\n    // plugin to avoid runtime TypeErrors. This means GFM features won't be\n    // enabled for this render, but it prevents the page from crashing.\n    interface ProcessorLike { data?: unknown }\n    const processorLike = this as ProcessorLike\n    if (!processorLike || typeof (processorLike.data as unknown) !== 'function') {\n        // silently skip attaching remark-gfm when `this` is not a unified\n        // processor (prevents noisy logs in StrictMode double-invokes).\n        return function () { return function noopTransformer(tree: unknown) { return tree } }\n      }\n    try {\n      return originalFn.apply(this, args)\n    } catch (e) {\n      logger.error('remark-gfm plugin threw during attach:', e)\n      return function () { return function noopTransformer(tree: unknown) { return tree } }\n    }\n  }\n}\n\nconst PostPage: React.FC = () => {\n  const { slug } = useParams()\n  const [post, setPost] = useState<Post | undefined>(undefined)\n  const [remarkGfm, setRemarkGfm] = useState<MarkdownPlugin | null>(null)\n  const [html, setHtml] = useState<string | null>(null)\n\n  useEffect(() => {\n    let mounted = true\n    ;(async () => {\n      try {\n        const mod = await import('remark-gfm')\n  const candidate = unwrapModuleDefault<unknown>(mod)\n        const wrapped = createSafeWrapper(candidate)\n        if (mounted) setRemarkGfm(wrapped)\n      } catch {\n        if (mounted) setRemarkGfm(null)\n      }\n    })()\n    return () => { mounted = false }\n  }, [])\n\n  useEffect(() => {\n    let mounted = true\n    ;(async () => {\n      if (!slug) return\n      try {\n        const p = await getPostBySlugAsync(slug)\n        if (!mounted) return\n        setPost(p)\n      } catch (e) {\n        logger.error('failed to load post:', e)\n        if (!mounted) return\n        setPost(undefined)\n      }\n    })()\n    return () => { mounted = false }\n  }, [slug])\n\n  useEffect(() => {\n    let mounted = true\n    ;(async () => {\n      if (!post) return\n      try {\n        const out = await markdownToHtml(post.content)\n        if (!mounted) return\n        setHtml(out)\n      } catch (e) {\n        logger.error('markdownToHtml failed:', e)\n        if (!mounted) return\n        setHtml(null)\n      }\n    })()\n    return () => { mounted = false }\n  }, [post])\n\n  if (!post) {\n    return (\n      <div className=\"page\">\n        <p>포스트를 찾을 수 없습니다.</p>\n        <Link to=\"/\">홈으로 돌아가기</Link>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"page content-section\">\n      <div style={{ width: '100%', textAlign: 'center', background: '#fff9e6', padding: '1rem 0' }}>\n        <span style={{ color: '#1f2937', fontSize: '2.4rem', fontWeight: 800 }}>\n          최신 버전 사이트로 이동해주시기 바랍니다&nbsp;\n          <a href=\"https://pargame.github.io/MyBlog\" target=\"_blank\" rel=\"noopener noreferrer\" style={{ color: '#065f46', fontSize: '2.2rem', fontWeight: 800, textDecoration: 'underline' }}>링크</a>\n        </span>\n      </div>\n      <header className=\"post-header\">\n        <h1>{post.meta.title}</h1>\n        <small>\n          {post.meta.date}\n          {post.meta.author ? ` · ${post.meta.author}` : null}\n        </small>\n      </header>\n      <div className=\"post-body\">\n        {/* Prefer sanitized HTML produced by unified pipeline for consistency across content and posts. */}\n        {html ? (\n          <div dangerouslySetInnerHTML={{ __html: html }} />\n        ) : (\n          <ReactMarkdown remarkPlugins={remarkGfm ? [remarkGfm] : []}>{post.content}</ReactMarkdown>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default PostPage\n"],"file":"assets/PostPage-Ba8l3F6Y.js"}